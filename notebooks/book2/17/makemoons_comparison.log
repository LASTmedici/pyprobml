An error occurred while executing the following cell:
------------------
num_warmup = 3000
key = jax.random.PRNGKey(314)
key_samples, key_init, key_warmup, key = jax.random.split(key, 4)
adapt = blackjax.window_adaptation(blackjax.nuts, bnn_log_joint_partial, num_warmup, progress_bar=True)
final_state, kernel, _ = adapt.run(key_warmup, params)
------------------

---------------------------------------------------------------------------
KeyError                                  Traceback (most recent call last)
~/miniconda3/envs/py37/lib/python3.7/site-packages/jax/interpreters/mlir.py in _lower_jaxpr_to_fun_cached(ctx, fn_name, call_jaxpr, effects)
   1121     try:
-> 1122       func_op = ctx.cached_call_jaxpr_lowerings[key]
   1123     except KeyError:

KeyError: ('wrapper_progress_bar', { lambda ; a:f32[1000,2] b:i32[1000] c:f32[8] d:f32[2,8] e:f32[16] f:f32[8,16] g:f32[16]
    h:f32[16,16] i:f32[8] j:f32[16,8] k:f32[1] l:f32[8,1] m:f32[] n:f32[8] o:f32[2,8]
    p:f32[16] q:f32[8,16] r:f32[16] s:f32[16,16] t:f32[8] u:f32[16,8] v:f32[1] w:f32[8,1]
    x:f32[] y:f32[] z:i32[] ba:f32[] bb:f32[] bc:f32[585] bd:f32[585] be:f32[585]
    bf:i32[] bg:i32[] bh:u32[2] bi:i32[2] bj:Tok bk:Tok. let
    bl:bool[] = eq bg 0
    bm:i32[] = convert_element_type[new_dtype=int32 weak_type=False] bl
    _:i32[] bn:Tok bo:Tok = cond[
      branches=(
        { lambda ; bp_:i32[] bq:i32[] br:Tok bs:Tok. let  in (bq, br, bs) }
        { lambda ; bt:i32[] bu_:i32[] bv:Tok bw:Tok. let
            _:i32[] bx:Tok by:Tok = outside_call[
              arg_treedef=PyTreeDef(*)
              callback=<jax.experimental.host_callback._CallbackWrapper object at 0x7fdcb0da5ad0>
              has_token=True
              identity=True
            ] bt bv bw
          in (bt, bx, by) }
      )
      linear=(False, False, False, False)
    ] bm bg bg bj bk
    bz:i32[] = xla_call[
      call_jaxpr={ lambda ; ca:i32[] cb:i32[]. let
          cc:i32[] = convert_element_type[new_dtype=int32 weak_type=False] cb
          cd:i32[] = rem ca cc
          ce:bool[] = ne cd 0
          cf:bool[] = lt cd 0
          cg:bool[] = lt cc 0
          ch:bool[] = ne cf cg
          ci:bool[] = and ch ce
          cj:i32[] = add cd cc
          ck:i32[] = select_n ci cd cj
        in (ck,) }
      name=remainder
    ] bg 150
    cl:bool[] = eq bz 0
    cm:i32[] = convert_element_type[new_dtype=int32 weak_type=False] cl
    _:i32[] cn:Tok co:Tok = cond[
      branches=(
        { lambda ; cp_:i32[] cq:i32[] cr:Tok cs:Tok. let  in (cq, cr, cs) }
        { lambda ; ct:i32[] cu_:i32[] cv:Tok cw:Tok. let
            _:i32[] cx:Tok cy:Tok = outside_call[
              arg_treedef=PyTreeDef(*)
              callback=<jax.experimental.host_callback._CallbackWrapper object at 0x7fdcb0db9310>
              has_token=True
              identity=True
            ] ct cv cw
          in (ct, cx, cy) }
      )
      linear=(False, False, False, False)
    ] cm bg bg bn bo
    cz:bool[] = eq bg 2999
    da:i32[] = convert_element_type[new_dtype=int32 weak_type=False] cz
    _:i32[] db:Tok dc:Tok = cond[
      branches=(
        { lambda ; dd_:i32[] de:i32[] df:Tok dg:Tok. let  in (de, df, dg) }
        { lambda ; dh:i32[] di_:i32[] dj:Tok dk:Tok. let
            _:i32[] dl:Tok dm:Tok = outside_call[
              arg_treedef=PyTreeDef(*)
              callback=<jax.experimental.host_callback._CallbackWrapper object at 0x7fdcb0db9fd0>
              has_token=True
              identity=True
            ] 3000 dj dk
          in (dh, dl, dm) }
      )
      linear=(False, False, False, False)
    ] da bg bg cn co
    dn:f32[] = exp x
    do:f32[585] = integer_pow[y=-1] bc
    dp:f32[585] = sqrt do
    dq:key<fry>[] = random_wrap[impl=fry] bh
    dr:key<fry>[2] = random_split[count=2] dq
    ds:u32[2,2] = random_unwrap dr
    dt:u32[1,2] = slice[
      limit_indices=(1, 2)
      start_indices=(0, 0)
      strides=(1, 1)
    ] ds
    du:u32[2] = squeeze[dimensions=(0,)] dt
    dv:u32[1,2] = slice[
      limit_indices=(2, 2)
      start_indices=(1, 0)
      strides=(1, 1)
    ] ds
    dw:u32[2] = squeeze[dimensions=(0,)] dv
    dx:f32[16] = reshape[dimensions=None new_sizes=(16,)] d
    dy:f32[128] = reshape[dimensions=None new_sizes=(128,)] f
    dz:f32[256] = reshape[dimensions=None new_sizes=(256,)] h
    ea:f32[128] = reshape[dimensions=None new_sizes=(128,)] j
    eb:f32[8] = reshape[dimensions=None new_sizes=(8,)] l
    _:f32[585] = concatenate[dimension=0] c dx e dy g dz i ea k eb
    ec:key<fry>[] = random_wrap[impl=fry] du
    ed:f32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] -0.9999999403953552
    ee:f32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1.0
    ef:u32[585] = random_bits[bit_width=32 shape=(585,)] ec
    eg:u32[585] = shift_right_logical ef 9
    eh:u32[585] = or eg 1065353216
    ei:f32[585] = bitcast_convert_type[new_dtype=float32] eh
    ej:f32[585] = sub ei 1.0
    ek:f32[1] = sub ee ed
    el:f32[585] = mul ej ek
    em:f32[585] = add el ed
    en:f32[585] = max ed em
    eo:f32[585] = erf_inv en
    ep:f32[585] = mul 1.4142135381698608 eo
    eq:f32[585] = mul dp ep
    er:f32[8] = slice[limit_indices=(8,) start_indices=(0,) strides=None] eq
    es:f32[16] = slice[limit_indices=(24,) start_indices=(8,) strides=None] eq
    et:f32[16] = slice[limit_indices=(40,) start_indices=(24,) strides=None] eq
    eu:f32[128] = slice[limit_indices=(168,) start_indices=(40,) strides=None] eq
    ev:f32[16] = slice[limit_indices=(184,) start_indices=(168,) strides=None] eq
    ew:f32[256] = slice[limit_indices=(440,) start_indices=(184,) strides=None] eq
    ex:f32[8] = slice[limit_indices=(448,) start_indices=(440,) strides=None] eq
    ey:f32[128] = slice[limit_indices=(576,) start_indices=(448,) strides=None] eq
    ez:f32[1] = slice[limit_indices=(577,) start_indices=(576,) strides=None] eq
    fa:f32[8] = slice[limit_indices=(585,) start_indices=(577,) strides=None] eq
    fb:f32[2,8] = reshape[dimensions=None new_sizes=(2, 8)] es
    fc:f32[8,16] = reshape[dimensions=None new_sizes=(8, 16)] eu
    fd:f32[16,16] = reshape[dimensions=None new_sizes=(16, 16)] ew
    fe:f32[16,8] = reshape[dimensions=None new_sizes=(16, 8)] ey
    ff:f32[8,1] = reshape[dimensions=None new_sizes=(8, 1)] fa
    fg:f32[16] = reshape[dimensions=None new_sizes=(16,)] d
    fh:f32[128] = reshape[dimensions=None new_sizes=(128,)] f
    fi:f32[256] = reshape[dimensions=None new_sizes=(256,)] h
    fj:f32[128] = reshape[dimensions=None new_sizes=(128,)] j
    fk:f32[8] = reshape[dimensions=None new_sizes=(8,)] l
    _:f32[585] = concatenate[dimension=0] c fg e fh g fi i fj k fk
    fl:f32[10,585] = broadcast_in_dim[broadcast_dimensions=() shape=(10, 585)] 0.0
    fm:f32[10,585] = broadcast_in_dim[broadcast_dimensions=() shape=(10, 585)] 0.0
    fn:f32[16] = reshape[dimensions=None new_sizes=(16,)] fb
    fo:f32[128] = reshape[dimensions=None new_sizes=(128,)] fc
    fp:f32[256] = reshape[dimensions=None new_sizes=(256,)] fd
    fq:f32[128] = reshape[dimensions=None new_sizes=(128,)] fe
    fr:f32[8] = reshape[dimensions=None new_sizes=(8,)] ff
    fs:f32[585] = concatenate[dimension=0] er fn et fo ev fp ex fq ez fr
    ft:f32[585] = mul bc fs
    fu:f32[] = dot_general[
      dimension_numbers=(((0,), (0,)), ((), ()))
      precision=None
      preferred_element_type=None
    ] ft fs
    fv:f32[] = mul 0.5 fu
    fw:f32[] = add m fv
    _:u32[2] fx:i32[] fy:f32[8] fz:f32[2,8] ga:f32[16] gb:f32[8,16] gc:f32[16] gd:f32[16,16]
      ge:f32[8] gf:f32[16,8] gg:f32[1] gh:f32[8,1] _:f32[8] _:f32[2,8] _:f32[16]
      _:f32[8,16] _:f32[16] _:f32[16,16] _:f32[8] _:f32[16,8] _:f32[1] _:f32[8,1]
      gi:f32[] gj:f32[8] gk:f32[2,8] gl:f32[16] gm:f32[8,16] gn:f32[16] go:f32[16,16]
      gp:f32[8] gq:f32[16,8] gr:f32[1] gs:f32[8,1] gt:f32[] _:f32[] gu:f32[] gv:f32[8]
      gw:f32[2,8] gx:f32[16] gy:f32[8,16] gz:f32[16] ha:f32[16,16] hb:f32[8] hc:f32[16,8]
      hd:f32[1] he:f32[8,1] hf:f32[8] hg:f32[2,8] hh:f32[16] hi:f32[8,16] hj:f32[16]
      hk:f32[16,16] hl:f32[8] hm:f32[16,8] hn:f32[1] ho:f32[8,1] hp:f32[] hq:f32[8]
      hr:f32[2,8] hs:f32[16] ht:f32[8,16] hu:f32[16] hv:f32[16,16] hw:f32[8] hx:f32[16,8]
      hy:f32[1] hz:f32[8,1] ia:f32[8] ib:f32[2,8] ic:f32[16] id:f32[8,16] ie:f32[16]
      if:f32[16,16] ig:f32[8] ih:f32[16,8] ii:f32[1] ij:f32[8,1] ik:f32[8] il:f32[2,8]
      im:f32[16] in:f32[8,16] io:f32[16] ip:f32[16,16] iq:f32[8] ir:f32[16,8] is:f32[1]
      it:f32[8,1] iu:f32[] iv:f32[8] iw:f32[2,8] ix:f32[16] iy:f32[8,16] iz:f32[16]
      ja:f32[16,16] jb:f32[8] jc:f32[16,8] jd:f32[1] je:f32[8,1] _:f32[8] _:f32[2,8]
      _:f32[16] _:f32[8,16] _:f32[16] _:f32[16,16] _:f32[8] _:f32[16,8] _:f32[1]
      _:f32[8,1] jf:i32[] _:f32[10,585] _:f32[10,585] _:i32[] _:i32[] jg:bool[] jh:bool[] = while[
      body_jaxpr={ lambda ; ji:f32[585] jj:f32[] jk:f32[] jl:f32[1000,2] jm:i32[1000]
          jn:u32[2] jo:i32[] jp:f32[8] jq:f32[2,8] jr:f32[16] js:f32[8,16] jt:f32[16]
          ju:f32[16,16] jv:f32[8] jw:f32[16,8] jx:f32[1] jy:f32[8,1] jz:f32[8] ka:f32[2,8]
          kb:f32[16] kc:f32[8,16] kd:f32[16] ke:f32[16,16] kf:f32[8] kg:f32[16,8]
          kh:f32[1] ki:f32[8,1] kj:f32[] kk:f32[8] kl:f32[2,8] km:f32[16] kn:f32[8,16]
          ko:f32[16] kp:f32[16,16] kq:f32[8] kr:f32[16,8] ks:f32[1] kt:f32[8,1] ku:f32[]
          kv:f32[] kw:f32[] kx:f32[8] ky:f32[2,8] kz:f32[16] la:f32[8,16] lb:f32[16]
          lc:f32[16,16] ld:f32[8] le:f32[16,8] lf:f32[1] lg:f32[8,1] lh:f32[8] li:f32[2,8]
          lj:f32[16] lk:f32[8,16] ll:f32[16] lm:f32[16,16] ln:f32[8] lo:f32[16,8]
          lp:f32[1] lq:f32[8,1] lr:f32[] ls:f32[8] lt:f32[2,8] lu:f32[16] lv:f32[8,16]
          lw:f32[16] lx:f32[16,16] ly:f32[8] lz:f32[16,8] ma:f32[1] mb:f32[8,1] mc:f32[8]
          md:f32[2,8] me:f32[16] mf:f32[8,16] mg:f32[16] mh:f32[16,16] mi:f32[8]
          mj:f32[16,8] mk:f32[1] ml:f32[8,1] mm:f32[8] mn:f32[2,8] mo:f32[16] mp:f32[8,16]
          mq:f32[16] mr:f32[16,16] ms:f32[8] mt:f32[16,8] mu:f32[1] mv:f32[8,1] mw:f32[]
          mx:f32[8] my:f32[2,8] mz:f32[16] na:f32[8,16] nb:f32[16] nc:f32[16,16]
          nd:f32[8] ne:f32[16,8] nf:f32[1] ng:f32[8,1] nh:f32[8] ni:f32[2,8] nj:f32[16]
          nk:f32[8,16] nl:f32[16] nm:f32[16,16] nn:f32[8] no:f32[16,8] np:f32[1]
          nq:f32[8,1] nr:i32[] ns:f32[10,585] nt:f32[10,585] nu:i32[] nv:i32[] nw:bool[]
          nx:bool[]. let
          ny:key<fry>[] = random_wrap[impl=fry] jn
          nz:key<fry>[4] = random_split[count=4] ny
          oa:u32[4,2] = random_unwrap nz
          ob:u32[1,2] = slice[
            limit_indices=(1, 2)
            start_indices=(0, 0)
            strides=(1, 1)
          ] oa
          oc:u32[2] = squeeze[dimensions=(0,)] ob
          od:u32[1,2] = slice[
            limit_indices=(2, 2)
            start_indices=(1, 0)
            strides=(1, 1)
          ] oa
          oe:u32[2] = squeeze[dimensions=(0,)] od
          of:u32[1,2] = slice[
            limit_indices=(3, 2)
            start_indices=(2, 0)
            strides=(1, 1)
          ] oa
          og:u32[2] = squeeze[dimensions=(0,)] of
          oh:u32[1,2] = slice[
            limit_indices=(4, 2)
            start_indices=(3, 0)
            strides=(1, 1)
          ] oa
          oi:u32[2] = squeeze[dimensions=(0,)] oh
          oj:key<fry>[] = random_wrap[impl=fry] oe
          ok:u32[] = random_bits[bit_width=32 shape=()] oj
          ol:u32[] = shift_right_logical ok 9
          om:u32[] = or ol 1065353216
          on:f32[] = bitcast_convert_type[new_dtype=float32] om
          oo:f32[] = sub on 1.0
          op:f32[] = sub 1.0 0.0
          oq:f32[] = mul oo op
          or:f32[] = add oq 0.0
          os:f32[] = reshape[dimensions=None new_sizes=()] or
          ot:f32[] = max 0.0 os
          ou:bool[] = lt ot 0.5
          ov:i32[] = xla_call[
            call_jaxpr={ lambda ; ow:bool[] ox:i32[] oy:i32[]. let
                oz:i32[] = select_n ow oy ox
              in (oz,) }
            name=_where
          ] ou 1 -1
          pa:bool[] = gt ov 0
          pb:i32[] = convert_element_type[new_dtype=int32 weak_type=False] pa
          pc:f32[8] pd:f32[2,8] pe:f32[16] pf:f32[8,16] pg:f32[16] ph:f32[16,16]
            pi:f32[8] pj:f32[16,8] pk:f32[1] pl:f32[8,1] pm:f32[8] pn:f32[2,8] po:f32[16]
            pp:f32[8,16] pq:f32[16] pr:f32[16,16] ps:f32[8] pt:f32[16,8] pu:f32[1]
            pv:f32[8,1] pw:f32[] px:f32[8] py:f32[2,8] pz:f32[16] qa:f32[8,16] qb:f32[16]
            qc:f32[16,16] qd:f32[8] qe:f32[16,8] qf:f32[1] qg:f32[8,1] = cond[
            branches=(
              { lambda ; qh_:f32[8] qi_:f32[2,8] qj_:f32[16] qk_:f32[8,16] ql_:f32[16]
                  qm_:f32[16,16] qn_:f32[8] qo_:f32[16,8] qp_:f32[1] qq_:f32[8,1]
                  qr_:f32[8] qs_:f32[2,8] qt_:f32[16] qu_:f32[8,16] qv_:f32[16] qw_:f32[16,16]
                  qx_:f32[8] qy_:f32[16,8] qz_:f32[1] ra_:f32[8,1] rb_:f32[] rc_:f32[8]
                  rd_:f32[2,8] re_:f32[16] rf_:f32[8,16] rg_:f32[16] rh_:f32[16,16]
                  ri_:f32[8] rj_:f32[16,8] rk_:f32[1] rl_:f32[8,1] rm:f32[8] rn:f32[2,8]
                  ro:f32[16] rp:f32[8,16] rq:f32[16] rr:f32[16,16] rs:f32[8] rt:f32[16,8]
                  ru:f32[1] rv:f32[8,1] rw:f32[8] rx:f32[2,8] ry:f32[16] rz:f32[8,16]
                  sa:f32[16] sb:f32[16,16] sc:f32[8] sd:f32[16,8] se:f32[1] sf:f32[8,1]
                  sg:f32[] sh:f32[8] si:f32[2,8] sj:f32[16] sk:f32[8,16] sl:f32[16]
                  sm:f32[16,16] sn:f32[8] so:f32[16,8] sp:f32[1] sq:f32[8,1]. let
                  
                in (rm, rn, ro, rp, rq, rr, rs, rt, ru, rv, rw, rx, ry, rz, sa, sb,
                  sc, sd, se, sf, sg, sh, si, sj, sk, sl, sm, sn, so, sp, sq) }
              { lambda ; sr:f32[8] ss:f32[2,8] st:f32[16] su:f32[8,16] sv:f32[16]
                  sw:f32[16,16] sx:f32[8] sy:f32[16,8] sz:f32[1] ta:f32[8,1] tb:f32[8]
                  tc:f32[2,8] td:f32[16] te:f32[8,16] tf:f32[16] tg:f32[16,16] th:f32[8]
                  ti:f32[16,8] tj:f32[1] tk:f32[8,1] tl:f32[] tm:f32[8] tn:f32[2,8]
                  to:f32[16] tp:f32[8,16] tq:f32[16] tr:f32[16,16] ts:f32[8] tt:f32[16,8]
                  tu:f32[1] tv:f32[8,1] tw_:f32[8] tx_:f32[2,8] ty_:f32[16] tz_:f32[8,16]
                  ua_:f32[16] ub_:f32[16,16] uc_:f32[8] ud_:f32[16,8] ue_:f32[1]
                  uf_:f32[8,1] ug_:f32[8] uh_:f32[2,8] ui_:f32[16] uj_:f32[8,16]
                  uk_:f32[16] ul_:f32[16,16] um_:f32[8] un_:f32[16,8] uo_:f32[1]
                  up_:f32[8,1] uq_:f32[] ur_:f32[8] us_:f32[2,8] ut_:f32[16] uu_:f32[8,16]
                  uv_:f32[16] uw_:f32[16,16] ux_:f32[8] uy_:f32[16,8] uz_:f32[1]
                  va_:f32[8,1]. let
                  
                in (sr, ss, st, su, sv, sw, sx, sy, sz, ta, tb, tc, td, te, tf, tg,
                  th, ti, tj, tk, tl, tm, tn, to, tp, tq, tr, ts, tt, tu, tv) }
            )
            linear=(False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False)
          ] pb mc md me mf mg mh mi mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx
            my mz na nb nc nd ne nf ng kx ky kz la lb lc ld le lf lg lh li lj lk
            ll lm ln lo lp lq lr ls lt lu lv lw lx ly lz ma mb
          vb:bool[] = eq 2 0
          vc:bool[] = ne jo 0
          vd:bool[] = and vb vc
          ve:i32[] = xla_call[
            call_jaxpr={ lambda ; vf:bool[] vg:i32[] vh:i32[]. let
                vi:i32[] = select_n vf vh vg
              in (vi,) }
            name=_where
          ] vd 0 1
          vj:i32[] = and jo 1
          vk:i32[] = mul ve 2
          vl:i32[] = xla_call[
            call_jaxpr={ lambda ; vm:i32[] vn:i32[] vo:i32[]. let
                vp:bool[] = ne vm 0
                vq:i32[] = select_n vp vo vn
              in (vq,) }
            name=_where
          ] vj vk ve
          vr:i32[] = mul 2 2
          vs:i32[] = shift_right_logical jo 1
          vt:i32[] = and vs 1
          vu:i32[] = mul vl vr
          vv:i32[] = xla_call[
            call_jaxpr={ lambda ; vw:i32[] vx:i32[] vy:i32[]. let
                vz:bool[] = ne vw 0
                wa:i32[] = select_n vz vy vx
              in (wa,) }
            name=_where
          ] vt vu vl
          wb:i32[] = mul vr vr
          wc:i32[] = shift_right_logical vs 1
          wd:i32[] = and wc 1
          we:i32[] = mul vv wb
          wf:i32[] = xla_call[
            call_jaxpr={ lambda ; wg:i32[] wh:i32[] wi:i32[]. let
                wj:bool[] = ne wg 0
                wk:i32[] = select_n wj wi wh
              in (wk,) }
            name=_where
          ] wd we vv
          wl:i32[] = mul wb wb
          wm:i32[] = shift_right_logical wc 1
          wn:i32[] = and wm 1
          wo:i32[] = mul wf wl
          wp:i32[] = xla_call[
            call_jaxpr={ lambda ; wq:i32[] wr:i32[] ws:i32[]. let
                wt:bool[] = ne wq 0
                wu:i32[] = select_n wt ws wr
              in (wu,) }
            name=_where
          ] wn wo wf
          wv:i32[] = mul wl wl
          ww:i32[] = shift_right_logical wm 1
          wx:i32[] = and ww 1
          wy:i32[] = mul wp wv
          wz:i32[] = xla_call[
            call_jaxpr={ lambda ; xa:i32[] xb:i32[] xc:i32[]. let
                xd:bool[] = ne xa 0
                xe:i32[] = select_n xd xc xb
              in (xe,) }
            name=_where
          ] wx wy wp
          xf:i32[] = mul wv wv
          xg:i32[] = shift_right_logical ww 1
          xh:i32[] = and xg 1
          xi:i32[] = mul wz xf
          xj:i32[] = xla_call[
            call_jaxpr={ lambda ; xk:i32[] xl:i32[] xm:i32[]. let
                xn:bool[] = ne xk 0
                xo:i32[] = select_n xn xm xl
              in (xo,) }
            name=_where
          ] xh xi wz
          _:i32[] = mul xf xf
          _:i32[] = shift_right_logical xg 1
          xp:f32[16] = reshape[dimensions=None new_sizes=(16,)] pn
          xq:f32[128] = reshape[dimensions=None new_sizes=(128,)] pp
          xr:f32[256] = reshape[dimensions=None new_sizes=(256,)] pr
          xs:f32[128] = reshape[dimensions=None new_sizes=(128,)] pt
          xt:f32[8] = reshape[dimensions=None new_sizes=(8,)] pv
          xu:f32[585] = concatenate[dimension=0] pm xp po xq pq xr ps xs pu xt
          xv:f32[585] = mul ji xu
          xw:f32[] = dot_general[
            dimension_numbers=(((0,), (0,)), ((), ()))
            precision=None
            preferred_element_type=None
          ] xv xu
          xx:f32[] = mul 0.5 xw
          xy:f32[] = add pw xx
          xz:f32[] = sub jj xy
          ya:bool[] = xla_call[
            call_jaxpr={ lambda ; yb:f32[]. let yc:bool[] = ne yb yb in (yc,) }
            name=isnan
          ] xz
          yd:f32[] = xla_call[
            call_jaxpr={ lambda ; ye:bool[] yf:f32[] yg:f32[]. let
                yh:f32[] = convert_element_type[
                  new_dtype=float32
                  weak_type=False
                ] yf
                yi:f32[] = select_n ye yg yh
              in (yi,) }
            name=_where
          ] ya -inf xz
          yj:f32[] = abs yd
          _:bool[] = gt yj 1000.0
          yk:f32[] = min yd 0.0
          _:u32[2] _:i32[] yl:f32[8] ym:f32[2,8] yn:f32[16] yo:f32[8,16] yp:f32[16]
            yq:f32[16,16] yr:f32[8] ys:f32[16,8] yt:f32[1] yu:f32[8,1] yv:f32[8]
            yw:f32[2,8] yx:f32[16] yy:f32[8,16] yz:f32[16] za:f32[16,16] zb:f32[8]
            zc:f32[16,8] zd:f32[1] ze:f32[8,1] zf:f32[] zg:f32[8] zh:f32[2,8] zi:f32[16]
            zj:f32[8,16] zk:f32[16] zl:f32[16,16] zm:f32[8] zn:f32[16,8] zo:f32[1]
            zp:f32[8,1] zq:f32[] zr:f32[] zs:f32[] zt:f32[8] zu:f32[2,8] zv:f32[16]
            zw:f32[8,16] zx:f32[16] zy:f32[16,16] zz:f32[8] baa:f32[16,8] bab:f32[1]
            bac:f32[8,1] bad:f32[8] bae:f32[2,8] baf:f32[16] bag:f32[8,16] bah:f32[16]
            bai:f32[16,16] baj:f32[8] bak:f32[16,8] bal:f32[1] bam:f32[8,1] ban:f32[]
            bao:f32[8] bap:f32[2,8] baq:f32[16] bar:f32[8,16] bas:f32[16] bat:f32[16,16]
            bau:f32[8] bav:f32[16,8] baw:f32[1] bax:f32[8,1] bay:f32[8] baz:f32[2,8]
            bba:f32[16] bbb:f32[8,16] bbc:f32[16] bbd:f32[16,16] bbe:f32[8] bbf:f32[16,8]
            bbg:f32[1] bbh:f32[8,1] bbi:f32[8] bbj:f32[2,8] bbk:f32[16] bbl:f32[8,16]
            bbm:f32[16] bbn:f32[16,16] bbo:f32[8] bbp:f32[16,8] bbq:f32[1] bbr:f32[8,1]
            bbs:f32[] bbt:f32[8] bbu:f32[2,8] bbv:f32[16] bbw:f32[8,16] bbx:f32[16]
            bby:f32[16,16] bbz:f32[8] bca:f32[16,8] bcb:f32[1] bcc:f32[8,1] bcd:f32[8]
            bce:f32[2,8] bcf:f32[16] bcg:f32[8,16] bch:f32[16] bci:f32[16,16] bcj:f32[8]
            bck:f32[16,8] bcl:f32[1] bcm:f32[8,1] bcn:i32[] bco:f32[10,585] bcp:f32[10,585]
            bcq:i32[] bcr:i32[] bcs:bool[] bct:bool[] = while[
            body_jaxpr={ lambda ; bcu:i32[] bcv:f32[] bcw:f32[585] bcx:f32[1000,2]
                bcy:i32[1000] bcz:f32[] bda:u32[2] bdb:i32[] bdc:f32[8] bdd:f32[2,8]
                bde:f32[16] bdf:f32[8,16] bdg:f32[16] bdh:f32[16,16] bdi:f32[8] bdj:f32[16,8]
                bdk:f32[1] bdl:f32[8,1] bdm:f32[8] bdn:f32[2,8] bdo:f32[16] bdp:f32[8,16]
                bdq:f32[16] bdr:f32[16,16] bds:f32[8] bdt:f32[16,8] bdu:f32[1] bdv:f32[8,1]
                bdw:f32[] bdx:f32[8] bdy:f32[2,8] bdz:f32[16] bea:f32[8,16] beb:f32[16]
                bec:f32[16,16] bed:f32[8] bee:f32[16,8] bef:f32[1] beg:f32[8,1] beh:f32[]
                bei:f32[] bej:f32[] bek:f32[8] bel:f32[2,8] bem:f32[16] ben:f32[8,16]
                beo:f32[16] bep:f32[16,16] beq:f32[8] ber:f32[16,8] bes:f32[1] bet:f32[8,1]
                beu:f32[8] bev:f32[2,8] bew:f32[16] bex:f32[8,16] bey:f32[16] bez:f32[16,16]
                bfa:f32[8] bfb:f32[16,8] bfc:f32[1] bfd:f32[8,1] bfe:f32[] bff:f32[8]
                bfg:f32[2,8] bfh:f32[16] bfi:f32[8,16] bfj:f32[16] bfk:f32[16,16]
                bfl:f32[8] bfm:f32[16,8] bfn:f32[1] bfo:f32[8,1] bfp:f32[8] bfq:f32[2,8]
                bfr:f32[16] bfs:f32[8,16] bft:f32[16] bfu:f32[16,16] bfv:f32[8] bfw:f32[16,8]
                bfx:f32[1] bfy:f32[8,1] bfz:f32[8] bga:f32[2,8] bgb:f32[16] bgc:f32[8,16]
                bgd:f32[16] bge:f32[16,16] bgf:f32[8] bgg:f32[16,8] bgh:f32[1] bgi:f32[8,1]
                bgj:f32[] bgk:f32[8] bgl:f32[2,8] bgm:f32[16] bgn:f32[8,16] bgo:f32[16]
                bgp:f32[16,16] bgq:f32[8] bgr:f32[16,8] bgs:f32[1] bgt:f32[8,1] bgu:f32[8]
                bgv:f32[2,8] bgw:f32[16] bgx:f32[8,16] bgy:f32[16] bgz:f32[16,16]
                bha:f32[8] bhb:f32[16,8] bhc:f32[1] bhd:f32[8,1] bhe:i32[] bhf:f32[10,585]
                bhg:f32[10,585] bhh:i32[] bhi:i32[] bhj:bool[] bhk:bool[]. let
                bhl:key<fry>[] = random_wrap[impl=fry] bda
                bhm:key<fry>[2] = random_split[count=2] bhl
                bhn:u32[2,2] = random_unwrap bhm
                bho:u32[1,2] = slice[
                  limit_indices=(1, 2)
                  start_indices=(0, 0)
                  strides=(1, 1)
                ] bhn
                bhp:u32[2] = squeeze[dimensions=(0,)] bho
                bhq:u32[1,2] = slice[
                  limit_indices=(2, 2)
                  start_indices=(1, 0)
                  strides=(1, 1)
                ] bhn
                bhr:u32[2] = squeeze[dimensions=(0,)] bhq
                bhs:f32[] = convert_element_type[
                  new_dtype=float32
                  weak_type=True
                ] bcu
                bht:f32[] = mul bhs bcv
                bhu:f32[] = mul 0.5 bht
                bhv:f32[] = convert_element_type[
                  new_dtype=float32
                  weak_type=False
                ] bhu
                bhw:f32[8] = mul bhv bgk
                bhx:f32[8] = sub bfz bhw
                bhy:f32[] = mul 0.5 bht
                bhz:f32[] = convert_element_type[
                  new_dtype=float32
                  weak_type=False
                ] bhy
                bia:f32[2,8] = mul bhz bgl
                bib:f32[2,8] = sub bga bia
                bic:f32[] = mul 0.5 bht
                bid:f32[] = convert_element_type[
                  new_dtype=float32
                  weak_type=False
                ] bic
                bie:f32[16] = mul bid bgm
                bif:f32[16] = sub bgb bie
                big:f32[] = mul 0.5 bht
                bih:f32[] = convert_element_type[
                  new_dtype=float32
                  weak_type=False
                ] big
                bii:f32[8,16] = mul bih bgn
                bij:f32[8,16] = sub bgc bii
                bik:f32[] = mul 0.5 bht
                bil:f32[] = convert_element_type[
                  new_dtype=float32
                  weak_type=False
                ] bik
                bim:f32[16] = mul bil bgo
                bin:f32[16] = sub bgd bim
                bio:f32[] = mul 0.5 bht
                bip:f32[] = convert_element_type[
                  new_dtype=float32
                  weak_type=False
                ] bio
                biq:f32[16,16] = mul bip bgp
                bir:f32[16,16] = sub bge biq
                bis:f32[] = mul 0.5 bht
                bit:f32[] = convert_element_type[
                  new_dtype=float32
                  weak_type=False
                ] bis
                biu:f32[8] = mul bit bgq
                biv:f32[8] = sub bgf biu
                biw:f32[] = mul 0.5 bht
                bix:f32[] = convert_element_type[
                  new_dtype=float32
                  weak_type=False
                ] biw
                biy:f32[16,8] = mul bix bgr
                biz:f32[16,8] = sub bgg biy
                bja:f32[] = mul 0.5 bht
                bjb:f32[] = convert_element_type[
                  new_dtype=float32
                  weak_type=False
                ] bja
                bjc:f32[1] = mul bjb bgs
                bjd:f32[1] = sub bgh bjc
                bje:f32[] = mul 0.5 bht
                bjf:f32[] = convert_element_type[
                  new_dtype=float32
                  weak_type=False
                ] bje
                bjg:f32[8,1] = mul bjf bgt
                bjh:f32[8,1] = sub bgi bjg
                bji:f32[16] = reshape[dimensions=None new_sizes=(16,)] bib
                bjj:f32[128] = reshape[dimensions=None new_sizes=(128,)] bij
                bjk:f32[256] = reshape[dimensions=None new_sizes=(256,)] bir
                bjl:f32[128] = reshape[dimensions=None new_sizes=(128,)] biz
                bjm:f32[8] = reshape[dimensions=None new_sizes=(8,)] bjh
                bjn:f32[585] = concatenate[dimension=0] bhx bji bif bjj bin bjk biv
                  bjl bjd bjm
                bjo:f32[585] = mul bcw bjn
                bjp:f32[] = dot_general[
                  dimension_numbers=(((0,), (0,)), ((), ()))
                  precision=None
                  preferred_element_type=None
                ] bjo bjn
                _:f32[] = mul 0.5 bjp
                bjq:f32[] = mul 0.5 1.0
                bjr:f32[585] = dot_general[
                  dimension_numbers=(((), ()), ((), ()))
                  precision=None
                  preferred_element_type=None
                ] bjq bjo
                bjs:f32[585] = dot_general[
                  dimension_numbers=(((), ()), ((), ()))
                  precision=None
                  preferred_element_type=None
                ] bjq bjn
                bjt:f32[585] = mul bcw bjs
                bju:f32[585] = add_any bjr bjt
                bjv:f32[8] = slice[
                  limit_indices=(8,)
                  start_indices=(0,)
                  strides=None
                ] bju
                bjw:f32[16] = slice[
                  limit_indices=(24,)
                  start_indices=(8,)
                  strides=None
                ] bju
                bjx:f32[16] = slice[
                  limit_indices=(40,)
                  start_indices=(24,)
                  strides=None
                ] bju
                bjy:f32[128] = slice[
                  limit_indices=(168,)
                  start_indices=(40,)
                  strides=None
                ] bju
                bjz:f32[16] = slice[
                  limit_indices=(184,)
                  start_indices=(168,)
                  strides=None
                ] bju
                bka:f32[256] = slice[
                  limit_indices=(440,)
                  start_indices=(184,)
                  strides=None
                ] bju
                bkb:f32[8] = slice[
                  limit_indices=(448,)
                  start_indices=(440,)
                  strides=None
                ] bju
                bkc:f32[128] = slice[
                  limit_indices=(576,)
                  start_indices=(448,)
                  strides=None
                ] bju
                bkd:f32[1] = slice[
                  limit_indices=(577,)
                  start_indices=(576,)
                  strides=None
                ] bju
                bke:f32[8] = slice[
                  limit_indices=(585,)
                  start_indices=(577,)
                  strides=None
                ] bju
                bkf:f32[8,1] = reshape[dimensions=None new_sizes=(8, 1)] bke
                bkg:f32[16,8] = reshape[dimensions=None new_sizes=(16, 8)] bkc
                bkh:f32[16,16] = reshape[dimensions=None new_sizes=(16, 16)] bka
                bki:f32[8,16] = reshape[dimensions=None new_sizes=(8, 16)] bjy
                bkj:f32[2,8] = reshape[dimensions=None new_sizes=(2, 8)] bjw
                bkk:f32[] = mul 1.0 bht
                bkl:f32[] = convert_element_type[
                  new_dtype=float32
                  weak_type=False
                ] bkk
                bkm:f32[8] = mul bkl bjv
                bkn:f32[8] = add bfp bkm
                bko:f32[] = mul 1.0 bht
                bkp:f32[] = convert_element_type[
                  new_dtype=float32
                  weak_type=False
                ] bko
                bkq:f32[2,8] = mul bkp bkj
                bkr:f32[2,8] = add bfq bkq
                bks:f32[] = mul 1.0 bht
                bkt:f32[] = convert_element_type[
                  new_dtype=float32
                  weak_type=False
                ] bks
                bku:f32[16] = mul bkt bjx
                bkv:f32[16] = add bfr bku
                bkw:f32[] = mul 1.0 bht
                bkx:f32[] = convert_element_type[
                  new_dtype=float32
                  weak_type=False
                ] bkw
                bky:f32[8,16] = mul bkx bki
                bkz:f32[8,16] = add bfs bky
                bla:f32[] = mul 1.0 bht
                blb:f32[] = convert_element_type[
                  new_dtype=float32
                  weak_type=False
                ] bla
                blc:f32[16] = mul blb bjz
                bld:f32[16] = add bft blc
                ble:f32[] = mul 1.0 bht
                blf:f32[] = convert_element_type[
                  new_dtype=float32
                  weak_type=False
                ] ble
                blg:f32[16,16] = mul blf bkh
                blh:f32[16,16] = add bfu blg
                bli:f32[] = mul 1.0 bht
                blj:f32[] = convert_element_type[
                  new_dtype=float32
                  weak_type=False
                ] bli
                blk:f32[8] = mul blj bkb
                bll:f32[8] = add bfv blk
                blm:f32[] = mul 1.0 bht
                bln:f32[] = convert_element_type[
                  new_dtype=float32
                  weak_type=False
                ] blm
                blo:f32[16,8] = mul bln bkg
                blp:f32[16,8] = add bfw blo
                blq:f32[] = mul 1.0 bht
                blr:f32[] = convert_element_type[
                  new_dtype=float32
                  weak_type=False
                ] blq
                bls:f32[1] = mul blr bkd
                blt:f32[1] = add bfx bls
                blu:f32[] = mul 1.0 bht
                blv:f32[] = convert_element_type[
                  new_dtype=float32
                  weak_type=False
                ] blu
                blw:f32[8,1] = mul blv bkf
                blx:f32[8,1] = add bfy blw
                bly:f32[1000,8] = dot_general[
                  dimension_numbers=(((1,), (0,)), ((), ()))
                  precision=None
                  preferred_element_type=None
                ] bcx bkr
                blz:f32[1,8] = reshape[dimensions=None new_sizes=(1, 8)] bkn
                bma:f32[1000,8] = add bly blz
                bmb:f32[1000,8] = custom_jvp_call[
                  call_jaxpr={ lambda ; bmc:f32[1000,8]. let
                      bmd:f32[1000,8] = xla_call[
                        call_jaxpr={ lambda ; bme:f32[1000,8]. let
                            bmf:f32[1000,8] = max bme 0.0
                          in (bmf,) }
                        name=relu
                      ] bmc
                    in (bmd,) }
                  jvp_jaxpr_thunk=<function _memoize.<locals>.memoized at 0x7fdcb0d1aa70>
                  num_consts=0
                ] bma
                bmg:bool[1000,8] = gt bma 0.0
                _:f32[1000,8] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1000, 8)
                ] 0.0
                bmh:f32[1000,16] = dot_general[
                  dimension_numbers=(((1,), (0,)), ((), ()))
                  precision=None
                  preferred_element_type=None
                ] bmb bkz
                bmi:f32[1,16] = reshape[dimensions=None new_sizes=(1, 16)] bkv
                bmj:f32[1000,16] = add bmh bmi
                bmk:f32[1000,16] = custom_jvp_call[
                  call_jaxpr={ lambda ; bml:f32[1000,16]. let
                      bmm:f32[1000,16] = xla_call[
                        call_jaxpr={ lambda ; bmn:f32[1000,16]. let
                            bmo:f32[1000,16] = max bmn 0.0
                          in (bmo,) }
                        name=relu
                      ] bml
                    in (bmm,) }
                  jvp_jaxpr_thunk=<function _memoize.<locals>.memoized at 0x7fdcb0d1ac20>
                  num_consts=0
                ] bmj
                bmp:bool[1000,16] = gt bmj 0.0
                _:f32[1000,16] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1000, 16)
                ] 0.0
                bmq:f32[1000,16] = dot_general[
                  dimension_numbers=(((1,), (0,)), ((), ()))
                  precision=None
                  preferred_element_type=None
                ] bmk blh
                bmr:f32[1,16] = reshape[dimensions=None new_sizes=(1, 16)] bld
                bms:f32[1000,16] = add bmq bmr
                bmt:f32[1000,16] = custom_jvp_call[
                  call_jaxpr={ lambda ; bmu:f32[1000,16]. let
                      bmv:f32[1000,16] = xla_call[
                        call_jaxpr={ lambda ; bmw:f32[1000,16]. let
                            bmx:f32[1000,16] = max bmw 0.0
                          in (bmx,) }
                        name=relu
                      ] bmu
                    in (bmv,) }
                  jvp_jaxpr_thunk=<function _memoize.<locals>.memoized at 0x7fdcb0d1a710>
                  num_consts=0
                ] bms
                bmy:bool[1000,16] = gt bms 0.0
                _:f32[1000,16] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1000, 16)
                ] 0.0
                bmz:f32[1000,8] = dot_general[
                  dimension_numbers=(((1,), (0,)), ((), ()))
                  precision=None
                  preferred_element_type=None
                ] bmt blp
                bna:f32[1,8] = reshape[dimensions=None new_sizes=(1, 8)] bll
                bnb:f32[1000,8] = add bmz bna
                bnc:f32[1000,8] = custom_jvp_call[
                  call_jaxpr={ lambda ; bnd:f32[1000,8]. let
                      bne:f32[1000,8] = xla_call[
                        call_jaxpr={ lambda ; bnf:f32[1000,8]. let
                            bng:f32[1000,8] = max bnf 0.0
                          in (bng,) }
                        name=relu
                      ] bnd
                    in (bne,) }
                  jvp_jaxpr_thunk=<function _memoize.<locals>.memoized at 0x7fdcb0d1a3b0>
                  num_consts=0
                ] bnb
                bnh:bool[1000,8] = gt bnb 0.0
                _:f32[1000,8] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1000, 8)
                ] 0.0
                bni:f32[1000,1] = dot_general[
                  dimension_numbers=(((1,), (0,)), ((), ()))
                  precision=None
                  preferred_element_type=None
                ] bnc blx
                bnj:f32[1,1] = reshape[dimensions=None new_sizes=(1, 1)] blt
                bnk:f32[1000,1] = add bni bnj
                bnl:f32[1000,1] bnm:f32[1000,1] bnn:f32[1000,1] = xla_call[
                  call_jaxpr={ lambda ; bno:f32[1000,1]. let
                      bnp:f32[1000,1] = custom_jvp_call[
                        call_jaxpr={ lambda ; bnq:f32[1000,1]. let
                            bnr:f32[1000,1] = neg bnq
                            bns:f32[1000,1] = exp bnr
                            bnt:f32[1000,1] = add 1.0 bns
                            bnu:f32[1000,1] = div 1.0 bnt
                          in (bnu,) }
                        jvp_jaxpr_thunk=<function _memoize.<locals>.memoized at 0x7fdcb0c4b680>
                        num_consts=0
                      ] bno
                      bnv:f32[1000,1] = sub 1.0 bnp
                    in (bnp, bnv, bnp) }
                  name=sigmoid
                ] bnk
                bnw:f32[1000] = reshape[dimensions=None new_sizes=(1000,)] bnl
                bnx:f32[16] = reshape[dimensions=None new_sizes=(16,)] bkr
                bny:f32[128] = reshape[dimensions=None new_sizes=(128,)] bkz
                bnz:f32[256] = reshape[dimensions=None new_sizes=(256,)] blh
                boa:f32[128] = reshape[dimensions=None new_sizes=(128,)] blp
                bob:f32[8] = reshape[dimensions=None new_sizes=(8,)] blx
                boc:f32[585] = concatenate[dimension=0] bkn bnx bkv bny bld bnz bll
                  boa blt bob
                bod:f32[585] = div boc 1.0
                boe:f32[] = div 0.0 1.0
                bof:f32[585] = sub bod boe
                bog:f32[585] = integer_pow[y=2] bof
                boh:f32[585] = integer_pow[y=1] bof
                boi:f32[585] = mul 2.0 boh
                boj:f32[585] = mul -0.5 bog
                bok:f32[] = log 1.0
                bol:f32[] = add 0.9189385175704956 bok
                bom:f32[585] = sub boj bol
                bon:f32[] = reduce_sum[axes=(0,)] bom
                boo:f32[1000] bop:f32[1000] boq:f32[1000] = xla_call[
                  call_jaxpr={ lambda ; bor:f32[1000]. let
                      bos:i32[] = zeros_like 0
                      bot:f32[] = convert_element_type[
                        new_dtype=float32
                        weak_type=False
                      ] bos
                      bou:f32[1000] = custom_jvp_call[
                        call_jaxpr={ lambda ; bov:f32[1000] bow:f32[]. let
                            box:f32[1000] = xla_call[
                              call_jaxpr={ lambda ; boy:f32[1000] boz:f32[]. let
                                  bpa:f32[1000] = max boy boz
                                  bpb:f32[1000] = sub boy boz
                                  bpc:bool[1000] = ne bpb bpb
                                  bpd:f32[1000] = add boy boz
                                  bpe:f32[1000] = abs bpb
                                  bpf:f32[1000] = neg bpe
                                  bpg:f32[1000] = exp bpf
                                  bph:f32[1000] = log1p bpg
                                  bpi:f32[1000] = add bpa bph
                                  bpj:f32[1000] = select_n bpc bpi bpd
                                in (bpj,) }
                              name=logaddexp
                            ] bov bow
                          in (box,) }
                        jvp_jaxpr_thunk=<function _memoize.<locals>.memoized at 0x7fdcb0c4b830>
                        num_consts=0
                      ] bor 0.0
                      bpk:bool[1000] = eq bor inf
                      bpl:f32[1000] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1000,)
                      ] 0.0
                      bpm:f32[1000] = select_n bpk bor bpl
                      bpn:bool[1000] = eq bou inf
                      bpo:f32[1000] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1000,)
                      ] 0.0
                      bpp:f32[1000] = select_n bpn bou bpo
                      bpq:f32[1000] = sub bpm bpp
                      bpr:f32[1000] = exp bpq
                      bps:bool[] = eq 0.0 inf
                      bpt:f32[] = select_n bps 0.0 0.0
                      bpu:bool[1000] = eq bou inf
                      bpv:f32[1000] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1000,)
                      ] 0.0
                      bpw:f32[1000] = select_n bpu bou bpv
                      bpx:f32[1000] = sub bpt bpw
                      bpy:f32[1000] = exp bpx
                      bpz:f32[1000] = mul bot bpy
                    in (bou, bpr, bpz) }
                  name=softplus
                ] bnw
                bqa:f32[1000] = neg boo
                bqb:f32[1000] = neg bnw
                bqc:f32[1000] bqd:f32[1000] bqe:f32[1000] = xla_call[
                  call_jaxpr={ lambda ; bqf:f32[1000]. let
                      bqg:i32[] = zeros_like 0
                      bqh:f32[] = convert_element_type[
                        new_dtype=float32
                        weak_type=False
                      ] bqg
                      bqi:f32[1000] = custom_jvp_call[
                        call_jaxpr={ lambda ; bqj:f32[1000] bqk:f32[]. let
                            bql:f32[1000] = xla_call[
                              call_jaxpr={ lambda ; bqm:f32[1000] bqn:f32[]. let
                                  bqo:f32[1000] = max bqm bqn
                                  bqp:f32[1000] = sub bqm bqn
                                  bqq:bool[1000] = ne bqp bqp
                                  bqr:f32[1000] = add bqm bqn
                                  bqs:f32[1000] = abs bqp
                                  bqt:f32[1000] = neg bqs
                                  bqu:f32[1000] = exp bqt
                                  bqv:f32[1000] = log1p bqu
                                  bqw:f32[1000] = add bqo bqv
                                  bqx:f32[1000] = select_n bqq bqw bqr
                                in (bqx,) }
                              name=logaddexp
                            ] bqj bqk
                          in (bql,) }
                        jvp_jaxpr_thunk=<function _memoize.<locals>.memoized at 0x7fdcb0c4b9e0>
                        num_consts=0
                      ] bqf 0.0
                      bqy:bool[1000] = eq bqf inf
                      bqz:f32[1000] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1000,)
                      ] 0.0
                      bra:f32[1000] = select_n bqy bqf bqz
                      brb:bool[1000] = eq bqi inf
                      brc:f32[1000] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1000,)
                      ] 0.0
                      brd:f32[1000] = select_n brb bqi brc
                      bre:f32[1000] = sub bra brd
                      brf:f32[1000] = exp bre
                      brg:bool[] = eq 0.0 inf
                      brh:f32[] = select_n brg 0.0 0.0
                      bri:bool[1000] = eq bqi inf
                      brj:f32[1000] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1000,)
                      ] 0.0
                      brk:f32[1000] = select_n bri bqi brj
                      brl:f32[1000] = sub brh brk
                      brm:f32[1000] = exp brl
                      brn:f32[1000] = mul bqh brm
                    in (bqi, brf, brn) }
                  name=softplus
                ] bqb
                bro:f32[1000] = neg bqc
                brp:f32[1000] = convert_element_type[
                  new_dtype=float32
                  weak_type=False
                ] bcy
                brq:f32[1000] = sub 1.0 brp
                brr:bool[1000] = eq brq 0.0
                brs:f32[1000] = mul bqa brq
                brt:f32[1000] bru:f32[1000] = xla_call[
                  call_jaxpr={ lambda ; brv:bool[1000] brw:f32[] brx:f32[1000]. let
                      bry:f32[1000] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1000,)
                      ] brw
                      brz:f32[1000] = select_n brv brx bry
                      bsa:f32[1000] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1000,)
                      ] 0.0
                    in (brz, bsa) }
                  name=_where
                ] brr 0.0 brs
                bsb:bool[1000] = eq brp 0.0
                bsc:f32[1000] = mul bro brp
                bsd:f32[1000] bse:f32[1000] = xla_call[
                  call_jaxpr={ lambda ; bsf:bool[1000] bsg:f32[] bsh:f32[1000]. let
                      bsi:f32[1000] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1000,)
                      ] bsg
                      bsj:f32[1000] = select_n bsf bsh bsi
                      bsk:f32[1000] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1000,)
                      ] 0.0
                    in (bsj, bsk) }
                  name=_where
                ] bsb 0.0 bsc
                bsl:f32[1000] = add brt bsd
                bsm:f32[] = reduce_sum[axes=(0,)] bsl
                bsn:f32[] = add bon bsm
                bso:f32[] = add bsn bsm
                bsp:f32[] = neg bso
                bsq:f32[] = neg 1.0
                bsr:f32[] = add_any bsq bsq
                bss:f32[1000] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1000,)
                ] bsr
                bst:f32[1000] = xla_call[
                  call_jaxpr={ lambda ; bsu:bool[1000] bsv:f32[1000] bsw:f32[1000]. let
                      bsx:f32[1000] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1000,)
                      ] 0.0
                      bsy:bool[1000] = eq bsu False
                      bsz:f32[1000] = select_n bsy bsx bsw
                    in (bsz,) }
                  name=_where
                ] bsb bse bss
                bta:f32[1000] = mul bst brp
                btb:f32[1000] = neg bta
                _:f32[1000] btc:f32[1000] = xla_call[
                  call_jaxpr={ lambda ; btd:f32[1000] bte:f32[1000] btf:f32[1000]. let
                      btg:f32[1000] = mul btf btd
                    in (btf, btg) }
                  name=softplus
                ] bqd bqe btb
                bth:f32[1000] = neg btc
                bti:f32[1000] = xla_call[
                  call_jaxpr={ lambda ; btj:bool[1000] btk:f32[1000] btl:f32[1000]. let
                      btm:f32[1000] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1000,)
                      ] 0.0
                      btn:bool[1000] = eq btj False
                      bto:f32[1000] = select_n btn btm btl
                    in (bto,) }
                  name=_where
                ] brr bru bss
                btp:f32[1000] = mul bti brq
                btq:f32[1000] = neg btp
                _:f32[1000] btr:f32[1000] = xla_call[
                  call_jaxpr={ lambda ; bts:f32[1000] btt:f32[1000] btu:f32[1000]. let
                      btv:f32[1000] = mul btu bts
                    in (btu, btv) }
                  name=softplus
                ] bop boq btq
                btw:f32[1000] = add_any bth btr
                btx:f32[1000,1] = reshape[dimensions=None new_sizes=(1000, 1)] btw
                bty:f32[1000,1] = xla_call[
                  call_jaxpr={ lambda ; btz:f32[1000,1] bua:f32[1000,1] bub:f32[1000,1]. let
                      buc:f32[1000,1] = mul bub btz
                      bud:f32[1000,1] = mul buc bua
                    in (bud,) }
                  name=sigmoid
                ] bnm bnn btx
                bue:f32[1] = reduce_sum[axes=(0,)] bty
                buf:f32[1,1] = reshape[dimensions=None new_sizes=(1, 1)] bue
                bug:f32[1] = reshape[dimensions=None new_sizes=(1,)] buf
                buh:f32[1,8] = dot_general[
                  dimension_numbers=(((0,), (0,)), ((), ()))
                  precision=None
                  preferred_element_type=None
                ] bty bnc
                bui:f32[8,1] = transpose[permutation=(1, 0)] buh
                buj:f32[1000,8] = dot_general[
                  dimension_numbers=(((1,), (1,)), ((), ()))
                  precision=None
                  preferred_element_type=None
                ] bty blx
                buk:f32[1000,8] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1000, 8)
                ] 0.0
                bul:bool[1000,8] = eq bnh True
                bum:f32[1000,8] = select_n bul buk buj
                bun:f32[8] = reduce_sum[axes=(0,)] bum
                buo:f32[1,8] = reshape[dimensions=None new_sizes=(1, 8)] bun
                bup:f32[8] = reshape[dimensions=None new_sizes=(8,)] buo
                buq:f32[8,16] = dot_general[
                  dimension_numbers=(((0,), (0,)), ((), ()))
                  precision=None
                  preferred_element_type=None
                ] bum bmt
                bur:f32[16,8] = transpose[permutation=(1, 0)] buq
                bus:f32[1000,16] = dot_general[
                  dimension_numbers=(((1,), (1,)), ((), ()))
                  precision=None
                  preferred_element_type=None
                ] bum blp
                but:f32[1000,16] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1000, 16)
                ] 0.0
                buu:bool[1000,16] = eq bmy True
                buv:f32[1000,16] = select_n buu but bus
                buw:f32[16] = reduce_sum[axes=(0,)] buv
                bux:f32[1,16] = reshape[dimensions=None new_sizes=(1, 16)] buw
                buy:f32[16] = reshape[dimensions=None new_sizes=(16,)] bux
                buz:f32[16,16] = dot_general[
                  dimension_numbers=(((0,), (0,)), ((), ()))
                  precision=None
                  preferred_element_type=None
                ] buv bmk
                bva:f32[16,16] = transpose[permutation=(1, 0)] buz
                bvb:f32[1000,16] = dot_general[
                  dimension_numbers=(((1,), (1,)), ((), ()))
                  precision=None
                  preferred_element_type=None
                ] buv blh
                bvc:f32[1000,16] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1000, 16)
                ] 0.0
                bvd:bool[1000,16] = eq bmp True
                bve:f32[1000,16] = select_n bvd bvc bvb
                bvf:f32[16] = reduce_sum[axes=(0,)] bve
                bvg:f32[1,16] = reshape[dimensions=None new_sizes=(1, 16)] bvf
                bvh:f32[16] = reshape[dimensions=None new_sizes=(16,)] bvg
                bvi:f32[16,8] = dot_general[
                  dimension_numbers=(((0,), (0,)), ((), ()))
                  precision=None
                  preferred_element_type=None
                ] bve bmb
                bvj:f32[8,16] = transpose[permutation=(1, 0)] bvi
                bvk:f32[1000,8] = dot_general[
                  dimension_numbers=(((1,), (1,)), ((), ()))
                  precision=None
                  preferred_element_type=None
                ] bve bkz
                bvl:f32[1000,8] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(1000, 8)
                ] 0.0
                bvm:bool[1000,8] = eq bmg True
                bvn:f32[1000,8] = select_n bvm bvl bvk
                bvo:f32[8] = reduce_sum[axes=(0,)] bvn
                bvp:f32[1,8] = reshape[dimensions=None new_sizes=(1, 8)] bvo
                bvq:f32[8] = reshape[dimensions=None new_sizes=(8,)] bvp
                bvr:f32[8,2] = dot_general[
                  dimension_numbers=(((0,), (0,)), ((), ()))
                  precision=None
                  preferred_element_type=None
                ] bvn bcx
                bvs:f32[2,8] = transpose[permutation=(1, 0)] bvr
                bvt:f32[585] = broadcast_in_dim[
                  broadcast_dimensions=()
                  shape=(585,)
                ] bsq
                bvu:f32[585] = mul -0.5 bvt
                bvv:f32[585] = mul bvu boi
                bvw:f32[585] = div bvv 1.0
                bvx:f32[8] = slice[
                  limit_indices=(8,)
                  start_indices=(0,)
                  strides=None
                ] bvw
                bvy:f32[16] = slice[
                  limit_indices=(24,)
                  start_indices=(8,)
                  strides=None
                ] bvw
                bvz:f32[16] = slice[
                  limit_indices=(40,)
                  start_indices=(24,)
                  strides=None
                ] bvw
                bwa:f32[128] = slice[
                  limit_indices=(168,)
                  start_indices=(40,)
                  strides=None
                ] bvw
                bwb:f32[16] = slice[
                  limit_indices=(184,)
                  start_indices=(168,)
                  strides=None
                ] bvw
                bwc:f32[256] = slice[
                  limit_indices=(440,)
                  start_indices=(184,)
                  strides=None
                ] bvw
                bwd:f32[8] = slice[
                  limit_indices=(448,)
                  start_indices=(440,)
                  strides=None
                ] bvw
                bwe:f32[128] = slice[
                  limit_indices=(576,)
                  start_indices=(448,)
                  strides=None
                ] bvw
                bwf:f32[1] = slice[
                  limit_indices=(577,)
                  start_indices=(576,)
                  strides=None
                ] bvw
                bwg:f32[8] = slice[
                  limit_indices=(585,)
                  start_indices=(577,)
                  strides=None
                ] bvw
                bwh:f32[8,1] = reshape[dimensions=None new_sizes=(8, 1)] bwg
                bwi:f32[8,1] = add_any bui bwh
                bwj:f32[1] = add_any bug bwf
                bwk:f32[16,8] = reshape[dimensions=None new_sizes=(16, 8)] bwe
                bwl:f32[16,8] = add_any bur bwk
                bwm:f32[8] = add_any bup bwd
                bwn:f32[16,16] = reshape[dimensions=None new_sizes=(16, 16)] bwc
                bwo:f32[16,16] = add_any bva bwn
                bwp:f32[16] = add_any buy bwb
                bwq:f32[8,16] = reshape[dimensions=None new_sizes=(8, 16)] bwa
                bwr:f32[8,16] = add_any bvj bwq
                bws:f32[16] = add_any bvh bvz
                bwt:f32[2,8] = reshape[dimensions=None new_sizes=(2, 8)] bvy
                bwu:f32[2,8] = add_any bvs bwt
                bwv:f32[8] = add_any bvq bvx
                bww:f32[] = mul 0.5 bht
                bwx:f32[] = convert_element_type[
                  new_dtype=float32
                  weak_type=False
                ] bww
                bwy:f32[8] = mul bwx bwv
                bwz:f32[8] = sub bhx bwy
                bxa:f32[] = mul 0.5 bht
                bxb:f32[] = convert_element_type[
                  new_dtype=float32
                  weak_type=False
                ] bxa
                bxc:f32[2,8] = mul bxb bwu
                bxd:f32[2,8] = sub bib bxc
                bxe:f32[] = mul 0.5 bht
                bxf:f32[] = convert_element_type[
                  new_dtype=float32
                  weak_type=False
                ] bxe
                bxg:f32[16] = mul bxf bws
                bxh:f32[16] = sub bif bxg
                bxi:f32[] = mul 0.5 bht
                bxj:f32[] = convert_element_type[
                  new_dtype=float32
                  weak_type=False
                ] bxi
                bxk:f32[8,16] = mul bxj bwr
                bxl:f32[8,16] = sub bij bxk
                bxm:f32[] = mul 0.5 bht
                bxn:f32[] = convert_element_type[
                  new_dtype=float32
                  weak_type=False
                ] bxm
                bxo:f32[16] = mul bxn bwp
                bxp:f32[16] = sub bin bxo
                bxq:f32[] = mul 0.5 bht
                bxr:f32[] = convert_element_type[
                  new_dtype=float32
                  weak_type=False
                ] bxq
                bxs:f32[16,16] = mul bxr bwo
                bxt:f32[16,16] = sub bir bxs
                bxu:f32[] = mul 0.5 bht
                bxv:f32[] = convert_element_type[
                  new_dtype=float32
                  weak_type=False
                ] bxu
                bxw:f32[8] = mul bxv bwm
                bxx:f32[8] = sub biv bxw
                bxy:f32[] = mul 0.5 bht
                bxz:f32[] = convert_element_type[
                  new_dtype=float32
                  weak_type=False
                ] bxy
                bya:f32[16,8] = mul bxz bwl
                byb:f32[16,8] = sub biz bya
                byc:f32[] = mul 0.5 bht
                byd:f32[] = convert_element_type[
                  new_dtype=float32
                  weak_type=False
                ] byc
                bye:f32[1] = mul byd bwj
                byf:f32[1] = sub bjd bye
                byg:f32[] = mul 0.5 bht
                byh:f32[] = convert_element_type[
                  new_dtype=float32
                  weak_type=False
                ] byg
                byi:f32[8,1] = mul byh bwi
                byj:f32[8,1] = sub bjh byi
                byk:f32[16] = reshape[dimensions=None new_sizes=(16,)] bxd
                byl:f32[128] = reshape[dimensions=None new_sizes=(128,)] bxl
                bym:f32[256] = reshape[dimensions=None new_sizes=(256,)] bxt
                byn:f32[128] = reshape[dimensions=None new_sizes=(128,)] byb
                byo:f32[8] = reshape[dimensions=None new_sizes=(8,)] byj
                byp:f32[585] = concatenate[dimension=0] bwz byk bxh byl bxp bym bxx
                  byn byf byo
                byq:f32[585] = mul bcw byp
                byr:f32[] = dot_general[
                  dimension_numbers=(((0,), (0,)), ((), ()))
                  precision=None
                  preferred_element_type=None
                ] byq byp
                bys:f32[] = mul 0.5 byr
                byt:f32[] = add bsp bys
                byu:f32[] = sub bcz byt
                byv:bool[] = xla_call[
                  call_jaxpr={ lambda ; byw:f32[]. let
                      byx:bool[] = ne byw byw
                    in (byx,) }
                  name=isnan
                ] byu
                byy:f32[] = xla_call[
                  call_jaxpr={ lambda ; byz:bool[] bza:f32[] bzb:f32[]. let
                      bzc:f32[] = convert_element_type[
                        new_dtype=float32
                        weak_type=False
                      ] bza
                      bzd:f32[] = select_n byz bzb bzc
                    in (bzd,) }
                  name=_where
                ] byv -inf byu
                bze:f32[] = abs byy
                bzf:bool[] = gt bze 1000.0
                bzg:f32[] = min byy 0.0
                bzh:bool[] = eq bdb 0
                bzi:i32[] = convert_element_type[
                  new_dtype=int32
                  weak_type=False
                ] bzh
                bzj:f32[8] bzk:f32[2,8] bzl:f32[16] bzm:f32[8,16] bzn:f32[16] bzo:f32[16,16]
                  bzp:f32[8] bzq:f32[16,8] bzr:f32[1] bzs:f32[8,1] bzt:f32[8] bzu:f32[2,8]
                  bzv:f32[16] bzw:f32[8,16] bzx:f32[16] bzy:f32[16,16] bzz:f32[8]
                  caa:f32[16,8] cab:f32[1] cac:f32[8,1] cad:f32[] cae:f32[8] caf:f32[2,8]
                  cag:f32[16] cah:f32[8,16] cai:f32[16] caj:f32[16,16] cak:f32[8]
                  cal:f32[16,8] cam:f32[1] can:f32[8,1] cao:f32[8] cap:f32[2,8] caq:f32[16]
                  car:f32[8,16] cas:f32[16] cat:f32[16,16] cau:f32[8] cav:f32[16,8]
                  caw:f32[1] cax:f32[8,1] cay:f32[8] caz:f32[2,8] cba:f32[16] cbb:f32[8,16]
                  cbc:f32[16] cbd:f32[16,16] cbe:f32[8] cbf:f32[16,8] cbg:f32[1]
                  cbh:f32[8,1] cbi:f32[] cbj:f32[8] cbk:f32[2,8] cbl:f32[16] cbm:f32[8,16]
                  cbn:f32[16] cbo:f32[16,16] cbp:f32[8] cbq:f32[16,8] cbr:f32[1]
                  cbs:f32[8,1] cbt:f32[8] cbu:f32[2,8] cbv:f32[16] cbw:f32[8,16]
                  cbx:f32[16] cby:f32[16,16] cbz:f32[8] cca:f32[16,8] ccb:f32[1]
                  ccc:f32[8,1] ccd:i32[] cce:f32[8] ccf:f32[2,8] ccg:f32[16] cch:f32[8,16]
                  cci:f32[16] ccj:f32[16,16] cck:f32[8] ccl:f32[16,8] ccm:f32[1]
                  ccn:f32[8,1] cco:f32[8] ccp:f32[2,8] ccq:f32[16] ccr:f32[8,16]
                  ccs:f32[16] cct:f32[16,16] ccu:f32[8] ccv:f32[16,8] ccw:f32[1]
                  ccx:f32[8,1] ccy:f32[] ccz:f32[8] cda:f32[2,8] cdb:f32[16] cdc:f32[8,16]
                  cdd:f32[16] cde:f32[16,16] cdf:f32[8] cdg:f32[16,8] cdh:f32[1]
                  cdi:f32[8,1] cdj:f32[] cdk:f32[] cdl:f32[] = cond[
                  branches=(
                    { lambda ; cdm_:f32[8] cdn_:f32[2,8] cdo_:f32[16] cdp_:f32[8,16]
                        cdq_:f32[16] cdr_:f32[16,16] cds_:f32[8] cdt_:f32[16,8] cdu_:f32[1]
                        cdv_:f32[8,1] cdw_:f32[8] cdx_:f32[2,8] cdy_:f32[16] cdz_:f32[8,16]
                        cea_:f32[16] ceb_:f32[16,16] cec_:f32[8] ced_:f32[16,8] cee_:f32[1]
                        cef_:f32[8,1] ceg_:f32[] ceh_:f32[8] cei_:f32[2,8] cej_:f32[16]
                        cek_:f32[8,16] cel_:f32[16] cem_:f32[16,16] cen_:f32[8] ceo_:f32[16,8]
                        cep_:f32[1] ceq_:f32[8,1] cer_:f32[] ces_:f32[] cet_:f32[]
                        ceu:f32[8] cev:f32[8] cew:f32[2,8] cex:f32[2,8] cey:f32[16]
                        cez:f32[16] cfa:f32[8,16] cfb:f32[8,16] cfc:f32[16] cfd:f32[16]
                        cfe:f32[16,16] cff:f32[16,16] cfg:f32[8] cfh:f32[8] cfi:f32[16,8]
                        cfj:f32[16,8] cfk:f32[1] cfl:f32[1] cfm:f32[8,1] cfn:f32[8,1]
                        cfo:i32[] cfp:f32[] cfq:f32[] cfr:u32[2] cfs:f32[] cft:f32[]
                        cfu:f32[8] cfv:f32[2,8] cfw:f32[16] cfx:f32[8,16] cfy:f32[16]
                        cfz:f32[16,16] cga:f32[8] cgb:f32[16,8] cgc:f32[1] cgd:f32[8,1]
                        cge:f32[] cgf:f32[8] cgg:f32[2,8] cgh:f32[16] cgi:f32[8,16]
                        cgj:f32[16] cgk:f32[16,16] cgl:f32[8] cgm:f32[16,8] cgn:f32[1]
                        cgo:f32[8,1] cgp:f32[] cgq:f32[8] cgr:f32[2,8] cgs:f32[16]
                        cgt:f32[8,16] cgu:f32[16] cgv:f32[16,16] cgw:f32[8] cgx:f32[16,8]
                        cgy:f32[1] cgz:f32[8,1] cha:f32[8] chb:f32[2,8] chc:f32[16]
                        chd:f32[8,16] che:f32[16] chf:f32[16,16] chg:f32[8] chh:f32[16,8]
                        chi:f32[1] chj:f32[8,1] chk:f32[] chl:f32[8] chm:f32[2,8]
                        chn:f32[16] cho:f32[8,16] chp:f32[16] chq:f32[16,16] chr:f32[8]
                        chs:f32[16,8] cht:f32[1] chu:f32[8,1] chv:f32[] chw:f32[8]
                        chx:f32[2,8] chy:f32[16] chz:f32[8,16] cia:f32[16] cib:f32[16,16]
                        cic:f32[8] cid:f32[16,8] cie:f32[1] cif:f32[8,1] cig:f32[8]
                        cih:f32[2,8] cii:f32[16] cij:f32[8,16] cik:f32[16] cil:f32[16,16]
                        cim:f32[8] cin:f32[16,8] cio:f32[1] cip:f32[8,1] ciq:f32[]
                        cir:f32[8] cis:f32[2,8] cit:f32[16] ciu:f32[8,16] civ:f32[16]
                        ciw:f32[16,16] cix:f32[8] ciy:f32[16,8] ciz:f32[1] cja:f32[8,1]. let
                        cjb:f32[8] = add ceu cev
                        cjc:f32[2,8] = add cew cex
                        cjd:f32[16] = add cey cez
                        cje:f32[8,16] = add cfa cfb
                        cjf:f32[16] = add cfc cfd
                        cjg:f32[16,16] = add cfe cff
                        cjh:f32[8] = add cfg cfh
                        cji:f32[16,8] = add cfi cfj
                        cjj:f32[1] = add cfk cfl
                        cjk:f32[8,1] = add cfm cfn
                        cjl:i32[] = add cfo 1
                        cjm:f32[] = sub cfp cfq
                        cjn:f32[] = custom_jvp_call[
                          call_jaxpr={ lambda ; cjo:f32[]. let
                              cjp:f32[] = neg cjo
                              cjq:f32[] = exp cjp
                              cjr:f32[] = add 1.0 cjq
                              cjs:f32[] = div 1.0 cjr
                            in (cjs,) }
                          jvp_jaxpr_thunk=<function _memoize.<locals>.memoized at 0x7fdcb0d1a0e0>
                          num_consts=0
                        ] cjm
                        cjt:key<fry>[] = random_wrap[impl=fry] cfr
                        cju:u32[] = random_bits[bit_width=32 shape=()] cjt
                        cjv:u32[] = shift_right_logical cju 9
                        cjw:u32[] = or cjv 1065353216
                        cjx:f32[] = bitcast_convert_type[new_dtype=float32] cjw
                        cjy:f32[] = sub cjx 1.0
                        cjz:f32[] = sub 1.0 0.0
                        cka:f32[] = mul cjy cjz
                        ckb:f32[] = add cka 0.0
                        ckc:f32[] = reshape[dimensions=None new_sizes=()] ckb
                        ckd:f32[] = max 0.0 ckc
                        cke:bool[] = lt ckd cjn
                        ckf:f32[] = custom_jvp_call[
                          call_jaxpr={ lambda ; ckg:f32[] ckh:f32[]. let
                              cki:f32[] = xla_call[
                                call_jaxpr={ lambda ; ckj:f32[] ckk:f32[]. let
                                    ckl:f32[] = max ckj ckk
                                    ckm:f32[] = sub ckj ckk
                                    ckn:bool[] = ne ckm ckm
                                    cko:f32[] = add ckj ckk
                                    ckp:f32[] = abs ckm
                                    ckq:f32[] = neg ckp
                                    ckr:f32[] = exp ckq
                                    cks:f32[] = log1p ckr
                                    ckt:f32[] = add ckl cks
                                    cku:f32[] = select_n ckn ckt cko
                                  in (cku,) }
                                name=logaddexp
                              ] ckg ckh
                            in (cki,) }
                          jvp_jaxpr_thunk=<function _memoize.<locals>.memoized at 0x7fdcb0d1a4d0>
                          num_consts=0
                        ] cfq cfp
                        ckv:f32[] = custom_jvp_call[
                          call_jaxpr={ lambda ; ckw:f32[] ckx:f32[]. let
                              cky:f32[] = xla_call[
                                call_jaxpr={ lambda ; ckz:f32[] cla:f32[]. let
                                    clb:f32[] = max ckz cla
                                    clc:f32[] = sub ckz cla
                                    cld:bool[] = ne clc clc
                                    cle:f32[] = add ckz cla
                                    clf:f32[] = abs clc
                                    clg:f32[] = neg clf
                                    clh:f32[] = exp clg
                                    cli:f32[] = log1p clh
                                    clj:f32[] = add clb cli
                                    clk:f32[] = select_n cld clj cle
                                  in (clk,) }
                                name=logaddexp
                              ] ckw ckx
                            in (cky,) }
                          jvp_jaxpr_thunk=<function _memoize.<locals>.memoized at 0x7fdcb0d1a9e0>
                          num_consts=0
                        ] cfs cft
                        cll:i32[] = convert_element_type[
                          new_dtype=int32
                          weak_type=False
                        ] cke
                        clm:f32[8] cln:f32[2,8] clo:f32[16] clp:f32[8,16] clq:f32[16]
                          clr:f32[16,16] cls:f32[8] clt:f32[16,8] clu:f32[1] clv:f32[8,1]
                          clw:f32[8] clx:f32[2,8] cly:f32[16] clz:f32[8,16] cma:f32[16]
                          cmb:f32[16,16] cmc:f32[8] cmd:f32[16,8] cme:f32[1] cmf:f32[8,1]
                          cmg:f32[] cmh:f32[8] cmi:f32[2,8] cmj:f32[16] cmk:f32[8,16]
                          cml:f32[16] cmm:f32[16,16] cmn:f32[8] cmo:f32[16,8] cmp:f32[1]
                          cmq:f32[8,1] cmr:f32[] cms:f32[] cmt:f32[] = cond[
                          branches=(
                            { lambda ; cmu_:f32[8] cmv_:f32[2,8] cmw_:f32[16] cmx_:f32[8,16]
                                cmy_:f32[16] cmz_:f32[16,16] cna_:f32[8] cnb_:f32[16,8]
                                cnc_:f32[1] cnd_:f32[8,1] cne_:f32[8] cnf_:f32[2,8]
                                cng_:f32[16] cnh_:f32[8,16] cni_:f32[16] cnj_:f32[16,16]
                                cnk_:f32[8] cnl_:f32[16,8] cnm_:f32[1] cnn_:f32[8,1]
                                cno_:f32[] cnp_:f32[8] cnq_:f32[2,8] cnr_:f32[16]
                                cns_:f32[8,16] cnt_:f32[16] cnu_:f32[16,16] cnv_:f32[8]
                                cnw_:f32[16,8] cnx_:f32[1] cny_:f32[8,1] cnz_:f32[]
                                coa_:f32[] cob_:f32[] coc:f32[8] cod:f32[2,8] coe:f32[16]
                                cof:f32[8,16] cog:f32[16] coh:f32[16,16] coi:f32[8]
                                coj:f32[16,8] cok:f32[1] col:f32[8,1] com:f32[8]
                                con:f32[2,8] coo:f32[16] cop:f32[8,16] coq:f32[16]
                                cor:f32[16,16] cos:f32[8] cot:f32[16,8] cou:f32[1]
                                cov:f32[8,1] cow:f32[] cox:f32[8] coy:f32[2,8] coz:f32[16]
                                cpa:f32[8,16] cpb:f32[16] cpc:f32[16,16] cpd:f32[8]
                                cpe:f32[16,8] cpf:f32[1] cpg:f32[8,1] cph:f32[] cpi:f32[]
                                cpj:f32[]. let
                                
                              in (coc, cod, coe, cof, cog, coh, coi, coj, cok, col,
                                com, con, coo, cop, coq, cor, cos, cot, cou, cov,
                                cow, cox, coy, coz, cpa, cpb, cpc, cpd, cpe, cpf,
                                cpg, cph, cpi, cpj) }
                            { lambda ; cpk:f32[8] cpl:f32[2,8] cpm:f32[16] cpn:f32[8,16]
                                cpo:f32[16] cpp:f32[16,16] cpq:f32[8] cpr:f32[16,8]
                                cps:f32[1] cpt:f32[8,1] cpu:f32[8] cpv:f32[2,8] cpw:f32[16]
                                cpx:f32[8,16] cpy:f32[16] cpz:f32[16,16] cqa:f32[8]
                                cqb:f32[16,8] cqc:f32[1] cqd:f32[8,1] cqe:f32[] cqf:f32[8]
                                cqg:f32[2,8] cqh:f32[16] cqi:f32[8,16] cqj:f32[16]
                                cqk:f32[16,16] cql:f32[8] cqm:f32[16,8] cqn:f32[1]
                                cqo:f32[8,1] cqp:f32[] cqq:f32[] cqr:f32[] cqs_:f32[8]
                                cqt_:f32[2,8] cqu_:f32[16] cqv_:f32[8,16] cqw_:f32[16]
                                cqx_:f32[16,16] cqy_:f32[8] cqz_:f32[16,8] cra_:f32[1]
                                crb_:f32[8,1] crc_:f32[8] crd_:f32[2,8] cre_:f32[16]
                                crf_:f32[8,16] crg_:f32[16] crh_:f32[16,16] cri_:f32[8]
                                crj_:f32[16,8] crk_:f32[1] crl_:f32[8,1] crm_:f32[]
                                crn_:f32[8] cro_:f32[2,8] crp_:f32[16] crq_:f32[8,16]
                                crr_:f32[16] crs_:f32[16,16] crt_:f32[8] cru_:f32[16,8]
                                crv_:f32[1] crw_:f32[8,1] crx_:f32[] cry_:f32[] crz_:f32[]. let
                                
                              in (cpk, cpl, cpm, cpn, cpo, cpp, cpq, cpr, cps, cpt,
                                cpu, cpv, cpw, cpx, cpy, cpz, cqa, cqb, cqc, cqd,
                                cqe, cqf, cqg, cqh, cqi, cqj, cqk, cql, cqm, cqn,
                                cqo, cqp, cqq, cqr) }
                          )
                          linear=(False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False)
                        ] cll cfu cfv cfw cfx cfy cfz cga cgb cgc cgd cev cex cez
                          cfb cfd cff cfh cfj cfl cfn cge cgf cgg cgh cgi cgj cgk
                          cgl cgm cgn cgo cgp ckf ckv cgq cgr cgs cgt cgu cgv cgw
                          cgx cgy cgz cha chb chc chd che chf chg chh chi chj chk
                          chl chm chn cho chp chq chr chs cht chu chv ckf ckv
                      in (chw, chx, chy, chz, cia, cib, cic, cid, cie, cif, cig,
                        cih, cii, cij, cik, cil, cim, cin, cio, cip, ciq, cir, cis,
                        cit, ciu, civ, ciw, cix, ciy, ciz, cja, cfu, cfv, cfw, cfx,
                        cfy, cfz, cga, cgb, cgc, cgd, cev, cex, cez, cfb, cfd, cff,
                        cfh, cfj, cfl, cfn, cge, cgf, cgg, cgh, cgi, cgj, cgk, cgl,
                        cgm, cgn, cgo, cjb, cjc, cjd, cje, cjf, cjg, cjh, cji, cjj,
                        cjk, cjl, clm, cln, clo, clp, clq, clr, cls, clt, clu, clv,
                        clw, clx, cly, clz, cma, cmb, cmc, cmd, cme, cmf, cmg, cmh,
                        cmi, cmj, cmk, cml, cmm, cmn, cmo, cmp, cmq, cmr, cms, cmt) }
                    { lambda ; csa:f32[8] csb:f32[2,8] csc:f32[16] csd:f32[8,16]
                        cse:f32[16] csf:f32[16,16] csg:f32[8] csh:f32[16,8] csi:f32[1]
                        csj:f32[8,1] csk:f32[8] csl:f32[2,8] csm:f32[16] csn:f32[8,16]
                        cso:f32[16] csp:f32[16,16] csq:f32[8] csr:f32[16,8] css:f32[1]
                        cst:f32[8,1] csu:f32[] csv:f32[8] csw:f32[2,8] csx:f32[16]
                        csy:f32[8,16] csz:f32[16] cta:f32[16,16] ctb:f32[8] ctc:f32[16,8]
                        ctd:f32[1] cte:f32[8,1] ctf:f32[] ctg:f32[] cth:f32[] cti_:f32[8]
                        ctj_:f32[8] ctk_:f32[2,8] ctl_:f32[2,8] ctm_:f32[16] ctn_:f32[16]
                        cto_:f32[8,16] ctp_:f32[8,16] ctq_:f32[16] ctr_:f32[16] cts_:f32[16,16]
                        ctt_:f32[16,16] ctu_:f32[8] ctv_:f32[8] ctw_:f32[16,8] ctx_:f32[16,8]
                        cty_:f32[1] ctz_:f32[1] cua_:f32[8,1] cub_:f32[8,1] cuc_:i32[]
                        cud_:f32[] cue_:f32[] cuf_:u32[2] cug_:f32[] cuh_:f32[] cui_:f32[8]
                        cuj_:f32[2,8] cuk_:f32[16] cul_:f32[8,16] cum_:f32[16] cun_:f32[16,16]
                        cuo_:f32[8] cup_:f32[16,8] cuq_:f32[1] cur_:f32[8,1] cus_:f32[]
                        cut_:f32[8] cuu_:f32[2,8] cuv_:f32[16] cuw_:f32[8,16] cux_:f32[16]
                        cuy_:f32[16,16] cuz_:f32[8] cva_:f32[16,8] cvb_:f32[1] cvc_:f32[8,1]
                        cvd_:f32[] cve_:f32[8] cvf_:f32[2,8] cvg_:f32[16] cvh_:f32[8,16]
                        cvi_:f32[16] cvj_:f32[16,16] cvk_:f32[8] cvl_:f32[16,8] cvm_:f32[1]
                        cvn_:f32[8,1] cvo_:f32[8] cvp_:f32[2,8] cvq_:f32[16] cvr_:f32[8,16]
                        cvs_:f32[16] cvt_:f32[16,16] cvu_:f32[8] cvv_:f32[16,8] cvw_:f32[1]
                        cvx_:f32[8,1] cvy_:f32[] cvz_:f32[8] cwa_:f32[2,8] cwb_:f32[16]
                        cwc_:f32[8,16] cwd_:f32[16] cwe_:f32[16,16] cwf_:f32[8] cwg_:f32[16,8]
                        cwh_:f32[1] cwi_:f32[8,1] cwj_:f32[] cwk_:f32[8] cwl_:f32[2,8]
                        cwm_:f32[16] cwn_:f32[8,16] cwo_:f32[16] cwp_:f32[16,16]
                        cwq_:f32[8] cwr_:f32[16,8] cws_:f32[1] cwt_:f32[8,1] cwu_:f32[8]
                        cwv_:f32[2,8] cww_:f32[16] cwx_:f32[8,16] cwy_:f32[16] cwz_:f32[16,16]
                        cxa_:f32[8] cxb_:f32[16,8] cxc_:f32[1] cxd_:f32[8,1] cxe_:f32[]
                        cxf_:f32[8] cxg_:f32[2,8] cxh_:f32[16] cxi_:f32[8,16] cxj_:f32[16]
                        cxk_:f32[16,16] cxl_:f32[8] cxm_:f32[16,8] cxn_:f32[1] cxo_:f32[8,1]. let
                        
                      in (csa, csb, csc, csd, cse, csf, csg, csh, csi, csj, csk,
                        csl, csm, csn, cso, csp, csq, csr, css, cst, csu, csv, csw,
                        csx, csy, csz, cta, ctb, ctc, ctd, cte, csa, csb, csc, csd,
                        cse, csf, csg, csh, csi, csj, csk, csl, csm, csn, cso, csp,
                        csq, csr, css, cst, csu, csv, csw, csx, csy, csz, cta, ctb,
                        ctc, ctd, cte, csk, csl, csm, csn, cso, csp, csq, csr, css,
                        cst, 1, csa, csb, csc, csd, cse, csf, csg, csh, csi, csj,
                        csk, csl, csm, csn, cso, csp, csq, csr, css, cst, csu, csv,
                        csw, csx, csy, csz, cta, ctb, ctc, ctd, cte, ctf, ctg, cth) }
                  )
                  linear=(False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False)
                ] bzi bkn bkr bkv bkz bld blh bll blp blt blx bwz bxd bxh bxl bxp
                  bxt bxx byb byf byj bsp bwv bwu bws bwr bwp bwo bwm bwl bwj bwi
                  byt byy bzg bgu bwz bgv bxd bgw bxh bgx bxl bgy bxp bgz bxt bha
                  bxx bhb byb bhc byf bhd byj bhe byy bei bhr bej bzg bkn bkr bkv
                  bkz bld blh bll blp blt blx bsp bwv bwu bws bwr bwp bwo bwm bwl
                  bwj bwi byt bdc bdd bde bdf bdg bdh bdi bdj bdk bdl bdm bdn bdo
                  bdp bdq bdr bds bdt bdu bdv bdw bdx bdy bdz bea beb bec bed bee
                  bef beg beh bek bel bem ben beo bep beq ber bes bet beu bev bew
                  bex bey bez bfa bfb bfc bfd bfe bff bfg bfh bfi bfj bfk bfl bfm
                  bfn bfo
                cxp:i32[] = shift_right_arithmetic bdb 1
                _:i32[] cxq:i32[] = while[
                  body_jaxpr={ lambda ; cxr:i32[] cxs:i32[]. let
                      cxt:i32[] = shift_right_arithmetic cxr 1
                      cxu:i32[] = and cxr 1
                      cxv:i32[] = add cxs cxu
                    in (cxt, cxv) }
                  body_nconsts=0
                  cond_jaxpr={ lambda ; cxw:i32[] cxx:i32[]. let
                      cxy:bool[] = gt cxw 0
                    in (cxy,) }
                  cond_nconsts=0
                ] cxp 0
                _:i32[] cxz:i32[] = while[
                  body_jaxpr={ lambda ; cya:i32[] cyb:i32[]. let
                      cyc:i32[] = shift_right_arithmetic cya 1
                      cyd:i32[] = add cyb 1
                    in (cyc, cyd) }
                  body_nconsts=0
                  cond_jaxpr={ lambda ; cye:i32[] cyf:i32[]. let
                      cyg:i32[] = and cye 1
                      cyh:bool[] = ne cyg 0
                    in (cyh,) }
                  cond_nconsts=0
                ] bdb 0
                cyi:i32[] = sub cxq cxz
                cyj:i32[] = add cyi 1
                cyk:f32[16] = reshape[dimensions=None new_sizes=(16,)] bxd
                cyl:f32[128] = reshape[dimensions=None new_sizes=(128,)] bxl
                cym:f32[256] = reshape[dimensions=None new_sizes=(256,)] bxt
                cyn:f32[128] = reshape[dimensions=None new_sizes=(128,)] byb
                cyo:f32[8] = reshape[dimensions=None new_sizes=(8,)] byj
                cyp:f32[585] = concatenate[dimension=0] bwz cyk bxh cyl bxp cym bxx
                  cyn byf cyo
                cyq:f32[16] = reshape[dimensions=None new_sizes=(16,)] cbu
                cyr:f32[128] = reshape[dimensions=None new_sizes=(128,)] cbw
                cys:f32[256] = reshape[dimensions=None new_sizes=(256,)] cby
                cyt:f32[128] = reshape[dimensions=None new_sizes=(128,)] cca
                cyu:f32[8] = reshape[dimensions=None new_sizes=(8,)] ccc
                cyv:f32[585] = concatenate[dimension=0] cbt cyq cbv cyr cbx cys cbz
                  cyt ccb cyu
                cyw:i32[] = xla_call[
                  call_jaxpr={ lambda ; cyx:i32[] cyy:i32[]. let
                      cyz:i32[] = rem cyx cyy
                      cza:bool[] = ne cyz 0
                      czb:bool[] = lt cyz 0
                      czc:bool[] = lt cyy 0
                      czd:bool[] = ne czb czc
                      cze:bool[] = and czd cza
                      czf:i32[] = add cyz cyy
                      czg:i32[] = select_n cze cyz czf
                    in (czg,) }
                  name=remainder
                ] bdb 2
                czh:bool[] = eq cyw 0
                czi:i32[] = convert_element_type[
                  new_dtype=int32
                  weak_type=False
                ] czh
                czj:f32[10,585] czk:f32[10,585] = cond[
                  branches=(
                    { lambda ; czl_:i32[] czm_:f32[585] czn_:f32[585] czo:f32[10,585]
                        czp:f32[10,585] czq:f32[10,585] czr:f32[10,585]. let
                        
                      in (czq, czr) }
                    { lambda ; czs:i32[] czt:f32[585] czu:f32[585] czv:f32[10,585]
                        czw:f32[10,585] czx:f32[10,585] czy:f32[10,585]. let
                        czz:bool[] = lt czs 0
                        daa:i32[] = add czs 10
                        dab:i32[] = select_n czz czs daa
                        dac:i32[] = convert_element_type[
                          new_dtype=int32
                          weak_type=False
                        ] dab
                        dad:i32[1] = broadcast_in_dim[
                          broadcast_dimensions=()
                          shape=(1,)
                        ] dac
                        dae:f32[10,585] = scatter[
                          dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0,), inserted_window_dims=(0,), scatter_dims_to_operand_dims=(0,))
                          indices_are_sorted=True
                          mode=GatherScatterMode.FILL_OR_DROP
                          unique_indices=True
                          update_consts=()
                          update_jaxpr={ lambda ; daf:f32[] dag:f32[]. let
                              
                            in (dag,) }
                        ] czv dad czt
                        dah:bool[] = lt czs 0
                        dai:i32[] = add czs 10
                        daj:i32[] = select_n dah czs dai
                        dak:i32[] = convert_element_type[
                          new_dtype=int32
                          weak_type=False
                        ] daj
                        dal:i32[1] = broadcast_in_dim[
                          broadcast_dimensions=()
                          shape=(1,)
                        ] dak
                        dam:f32[10,585] = scatter[
                          dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0,), inserted_window_dims=(0,), scatter_dims_to_operand_dims=(0,))
                          indices_are_sorted=True
                          mode=GatherScatterMode.FILL_OR_DROP
                          unique_indices=True
                          update_consts=()
                          update_jaxpr={ lambda ; daf:f32[] dag:f32[]. let
                              
                            in (dag,) }
                        ] czw dal czu
                      in (dae, dam) }
                  )
                  linear=(False, False, False, False, False, False, False)
                ] czi cxq cyp cyv bhf bhg bhf bhg
                dan:f32[16] = reshape[dimensions=None new_sizes=(16,)] bxd
                dao:f32[128] = reshape[dimensions=None new_sizes=(128,)] bxl
                dap:f32[256] = reshape[dimensions=None new_sizes=(256,)] bxt
                daq:f32[128] = reshape[dimensions=None new_sizes=(128,)] byb
                dar:f32[8] = reshape[dimensions=None new_sizes=(8,)] byj
                das:f32[585] = concatenate[dimension=0] bwz dan bxh dao bxp dap bxx
                  daq byf dar
                dat:f32[16] = reshape[dimensions=None new_sizes=(16,)] cbu
                dau:f32[128] = reshape[dimensions=None new_sizes=(128,)] cbw
                dav:f32[256] = reshape[dimensions=None new_sizes=(256,)] cby
                daw:f32[128] = reshape[dimensions=None new_sizes=(128,)] cca
                dax:f32[8] = reshape[dimensions=None new_sizes=(8,)] ccc
                day:f32[585] = concatenate[dimension=0] cbt dat cbv dau cbx dav cbz
                  daw ccb dax
                _:i32[] daz:bool[] = while[
                  body_jaxpr={ lambda ; dba:f32[10,585] dbb:f32[585] dbc:f32[10,585]
                      dbd:f32[585] dbe:f32[585] dbf:i32[] dbg:bool[]. let
                      dbh:bool[] = lt dbf 0
                      dbi:i32[] = add dbf 10
                      dbj:i32[] = select_n dbh dbf dbi
                      dbk:i32[] = convert_element_type[
                        new_dtype=int32
                        weak_type=False
                      ] dbj
                      dbl:i32[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] dbk
                      dbm:f32[585] = gather[
                        dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(0,), start_index_map=(0,))
                        fill_value=None
                        indices_are_sorted=True
                        mode=GatherScatterMode.PROMISE_IN_BOUNDS
                        slice_sizes=(1, 585)
                        unique_indices=True
                      ] dba dbl
                      dbn:f32[585] = sub dbb dbm
                      dbo:bool[] = lt dbf 0
                      dbp:i32[] = add dbf 10
                      dbq:i32[] = select_n dbo dbf dbp
                      dbr:i32[] = convert_element_type[
                        new_dtype=int32
                        weak_type=False
                      ] dbq
                      dbs:i32[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] dbr
                      dbt:f32[585] = gather[
                        dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(0,), start_index_map=(0,))
                        fill_value=None
                        indices_are_sorted=True
                        mode=GatherScatterMode.PROMISE_IN_BOUNDS
                        slice_sizes=(1, 585)
                        unique_indices=True
                      ] dbc dbs
                      dbu:f32[585] = add dbn dbt
                      dbv:i32[] = sub dbf 1
                      dbw:bool[] = lt dbf 0
                      dbx:i32[] = add dbf 10
                      dby:i32[] = select_n dbw dbf dbx
                      dbz:i32[] = convert_element_type[
                        new_dtype=int32
                        weak_type=False
                      ] dby
                      dca:i32[1] = broadcast_in_dim[
                        broadcast_dimensions=()
                        shape=(1,)
                      ] dbz
                      dcb:f32[585] = gather[
                        dimension_numbers=GatherDimensionNumbers(offset_dims=(0,), collapsed_slice_dims=(0,), start_index_map=(0,))
                        fill_value=None
                        indices_are_sorted=True
                        mode=GatherScatterMode.PROMISE_IN_BOUNDS
                        slice_sizes=(1, 585)
                        unique_indices=True
                      ] dbc dca
                      dcc:f32[585] = mul dbe dcb
                      dcd:f32[585] = mul dbe dbd
                      dce:f32[585] = add dbd dcb
                      dcf:f32[585] = div dce 2.0
                      dcg:f32[585] = sub dbu dcf
                      dch:f32[] = dot_general[
                        dimension_numbers=(((0,), (0,)), ((), ()))
                        precision=None
                        preferred_element_type=None
                      ] dcc dcg
                      dci:bool[] = le dch 0.0
                      dcj:f32[] = dot_general[
                        dimension_numbers=(((0,), (0,)), ((), ()))
                        precision=None
                        preferred_element_type=None
                      ] dcd dcg
                      dck:bool[] = le dcj 0.0
                      dcl:bool[] = or dci dck
                    in (dbv, dcl) }
                  body_nconsts=5
                  cond_jaxpr={ lambda ; dcm:i32[] dcn:i32[] dco:bool[]. let
                      dcp:bool[] = ge dcn dcm
                      dcq:bool[] = not dco
                      dcr:bool[] = convert_element_type[
                        new_dtype=bool
                        weak_type=False
                      ] dcp
                      dcs:bool[] = convert_element_type[
                        new_dtype=bool
                        weak_type=False
                      ] dcq
                      dct:bool[] = and dcr dcs
                    in (dct,) }
                  cond_nconsts=1
                ] cyj czk day czj das bcw cxq False
                dcu:i32[] = add bdb 1
              in (bhp, dcu, cce, ccf, ccg, cch, cci, ccj, cck, ccl, ccm, ccn, cco,
                ccp, ccq, ccr, ccs, cct, ccu, ccv, ccw, ccx, ccy, ccz, cda, cdb,
                cdc, cdd, cde, cdf, cdg, cdh, cdi, cdj, cdk, cdl, bzj, bzk, bzl,
                bzm, bzn, bzo, bzp, bzq, bzr, bzs, bzt, bzu, bzv, bzw, bzx, bzy,
                bzz, caa, cab, cac, cad, cae, caf, cag, cah, cai, caj, cak, cal,
                cam, can, cao, cap, caq, car, cas, cat, cau, cav, caw, cax, cay,
                caz, cba, cbb, cbc, cbd, cbe, cbf, cbg, cbh, cbi, cbj, cbk, cbl,
                cbm, cbn, cbo, cbp, cbq, cbr, cbs, cbt, cbu, cbv, cbw, cbx, cby,
                cbz, cca, ccb, ccc, ccd, czj, czk, cyj, cxq, bzf, daz) }
            body_nconsts=6
            cond_jaxpr={ lambda ; dcv:i32[] dcw:u32[2] dcx:i32[] dcy:f32[8] dcz:f32[2,8]
                dda:f32[16] ddb:f32[8,16] ddc:f32[16] ddd:f32[16,16] dde:f32[8] ddf:f32[16,8]
                ddg:f32[1] ddh:f32[8,1] ddi:f32[8] ddj:f32[2,8] ddk:f32[16] ddl:f32[8,16]
                ddm:f32[16] ddn:f32[16,16] ddo:f32[8] ddp:f32[16,8] ddq:f32[1] ddr:f32[8,1]
                dds:f32[] ddt:f32[8] ddu:f32[2,8] ddv:f32[16] ddw:f32[8,16] ddx:f32[16]
                ddy:f32[16,16] ddz:f32[8] dea:f32[16,8] deb:f32[1] dec:f32[8,1] ded:f32[]
                dee:f32[] def:f32[] deg:f32[8] deh:f32[2,8] dei:f32[16] dej:f32[8,16]
                dek:f32[16] del:f32[16,16] dem:f32[8] den:f32[16,8] deo:f32[1] dep:f32[8,1]
                deq:f32[8] der:f32[2,8] des:f32[16] det:f32[8,16] deu:f32[16] dev:f32[16,16]
                dew:f32[8] dex:f32[16,8] dey:f32[1] dez:f32[8,1] dfa:f32[] dfb:f32[8]
                dfc:f32[2,8] dfd:f32[16] dfe:f32[8,16] dff:f32[16] dfg:f32[16,16]
                dfh:f32[8] dfi:f32[16,8] dfj:f32[1] dfk:f32[8,1] dfl:f32[8] dfm:f32[2,8]
                dfn:f32[16] dfo:f32[8,16] dfp:f32[16] dfq:f32[16,16] dfr:f32[8] dfs:f32[16,8]
                dft:f32[1] dfu:f32[8,1] dfv:f32[8] dfw:f32[2,8] dfx:f32[16] dfy:f32[8,16]
                dfz:f32[16] dga:f32[16,16] dgb:f32[8] dgc:f32[16,8] dgd:f32[1] dge:f32[8,1]
                dgf:f32[] dgg:f32[8] dgh:f32[2,8] dgi:f32[16] dgj:f32[8,16] dgk:f32[16]
                dgl:f32[16,16] dgm:f32[8] dgn:f32[16,8] dgo:f32[1] dgp:f32[8,1] dgq:f32[8]
                dgr:f32[2,8] dgs:f32[16] dgt:f32[8,16] dgu:f32[16] dgv:f32[16,16]
                dgw:f32[8] dgx:f32[16,8] dgy:f32[1] dgz:f32[8,1] dha:i32[] dhb:f32[10,585]
                dhc:f32[10,585] dhd:i32[] dhe:i32[] dhf:bool[] dhg:bool[]. let
                dhh:i32[] = convert_element_type[
                  new_dtype=int32
                  weak_type=False
                ] dcx
                dhi:bool[] = lt dhh dcv
                dhj:bool[] = not dhg
                dhk:bool[] = convert_element_type[
                  new_dtype=bool
                  weak_type=False
                ] dhj
                dhl:bool[] = and dhi dhk
                dhm:bool[] = not dhf
                dhn:bool[] = convert_element_type[
                  new_dtype=bool
                  weak_type=False
                ] dhm
                dho:bool[] = and dhl dhn
              in (dho,) }
            cond_nconsts=1
          ] xj ov jk ji jl jm jj og 0 pc pd pe pf pg ph pi pj pk pl pm pn po pp pq
            pr ps pt pu pv pw px py pz qa qb qc qd qe qf qg xy yd yk pc pd pe pf
            pg ph pi pj pk pl pm pn po pp pq pr ps pt pu pv pw px py pz qa qb qc
            qd qe qf qg pc pd pe pf pg ph pi pj pk pl pm pn po pp pq pr ps pt pu
            pv pw px py pz qa qb qc qd qe qf qg pm pn po pp pq pr ps pt pu pv 0 ns
            nt nu nv False False
          dhp:bool[] = gt ov 0
          dhq:i32[] = convert_element_type[new_dtype=int32 weak_type=False] dhp
          dhr:f32[8] dhs:f32[2,8] dht:f32[16] dhu:f32[8,16] dhv:f32[16] dhw:f32[16,16]
            dhx:f32[8] dhy:f32[16,8] dhz:f32[1] dia:f32[8,1] dib:f32[8] dic:f32[2,8]
            did:f32[16] die:f32[8,16] dif:f32[16] dig:f32[16,16] dih:f32[8] dii:f32[16,8]
            dij:f32[1] dik:f32[8,1] dil:f32[] dim:f32[8] din:f32[2,8] dio:f32[16]
            dip:f32[8,16] diq:f32[16] dir:f32[16,16] dis:f32[8] dit:f32[16,8] diu:f32[1]
            div:f32[8,1] diw:f32[8] dix:f32[2,8] diy:f32[16] diz:f32[8,16] dja:f32[16]
            djb:f32[16,16] djc:f32[8] djd:f32[16,8] dje:f32[1] djf:f32[8,1] djg:f32[8]
            djh:f32[2,8] dji:f32[16] djj:f32[8,16] djk:f32[16] djl:f32[16,16] djm:f32[8]
            djn:f32[16,8] djo:f32[1] djp:f32[8,1] djq:f32[] djr:f32[8] djs:f32[2,8]
            djt:f32[16] dju:f32[8,16] djv:f32[16] djw:f32[16,16] djx:f32[8] djy:f32[16,8]
            djz:f32[1] dka:f32[8,1] dkb:f32[8] dkc:f32[2,8] dkd:f32[16] dke:f32[8,16]
            dkf:f32[16] dkg:f32[16,16] dkh:f32[8] dki:f32[16,8] dkj:f32[1] dkk:f32[8,1]
            dkl:i32[] = cond[
            branches=(
              { lambda ; dkm_:f32[8] dkn_:f32[2,8] dko_:f32[16] dkp_:f32[8,16] dkq_:f32[16]
                  dkr_:f32[16,16] dks_:f32[8] dkt_:f32[16,8] dku_:f32[1] dkv_:f32[8,1]
                  dkw_:f32[8] dkx_:f32[2,8] dky_:f32[16] dkz_:f32[8,16] dla_:f32[16]
                  dlb_:f32[16,16] dlc_:f32[8] dld_:f32[16,8] dle_:f32[1] dlf_:f32[8,1]
                  dlg_:f32[] dlh_:f32[8] dli_:f32[2,8] dlj_:f32[16] dlk_:f32[8,16]
                  dll_:f32[16] dlm_:f32[16,16] dln_:f32[8] dlo_:f32[16,8] dlp_:f32[1]
                  dlq_:f32[8,1] dlr_:f32[8] dls_:f32[2,8] dlt_:f32[16] dlu_:f32[8,16]
                  dlv_:f32[16] dlw_:f32[16,16] dlx_:f32[8] dly_:f32[16,8] dlz_:f32[1]
                  dma_:f32[8,1] dmb_:f32[8] dmc_:f32[2,8] dmd_:f32[16] dme_:f32[8,16]
                  dmf_:f32[16] dmg_:f32[16,16] dmh_:f32[8] dmi_:f32[16,8] dmj_:f32[1]
                  dmk_:f32[8,1] dml_:f32[] dmm_:f32[8] dmn_:f32[2,8] dmo_:f32[16]
                  dmp_:f32[8,16] dmq_:f32[16] dmr_:f32[16,16] dms_:f32[8] dmt_:f32[16,8]
                  dmu_:f32[1] dmv_:f32[8,1] dmw_:f32[8] dmx_:f32[2,8] dmy_:f32[16]
                  dmz_:f32[8,16] dna_:f32[16] dnb_:f32[16,16] dnc_:f32[8] dnd_:f32[16,8]
                  dne_:f32[1] dnf_:f32[8,1] dng_:i32[] dnh:f32[8] dni:f32[2,8] dnj:f32[16]
                  dnk:f32[8,16] dnl:f32[16] dnm:f32[16,16] dnn:f32[8] dno:f32[16,8]
                  dnp:f32[1] dnq:f32[8,1] dnr:f32[8] dns:f32[2,8] dnt:f32[16] dnu:f32[8,16]
                  dnv:f32[16] dnw:f32[16,16] dnx:f32[8] dny:f32[16,8] dnz:f32[1]
                  doa:f32[8,1] dob:f32[] doc:f32[8] dod:f32[2,8] doe:f32[16] dof:f32[8,16]
                  dog:f32[16] doh:f32[16,16] doi:f32[8] doj:f32[16,8] dok:f32[1]
                  dol:f32[8,1] dom:f32[8] don:f32[2,8] doo:f32[16] dop:f32[8,16]
                  doq:f32[16] dor:f32[16,16] dos:f32[8] dot:f32[16,8] dou:f32[1]
                  dov:f32[8,1] dow:f32[8] dox:f32[2,8] doy:f32[16] doz:f32[8,16]
                  dpa:f32[16] dpb:f32[16,16] dpc:f32[8] dpd:f32[16,8] dpe:f32[1]
                  dpf:f32[8,1] dpg:f32[] dph:f32[8] dpi:f32[2,8] dpj:f32[16] dpk:f32[8,16]
                  dpl:f32[16] dpm:f32[16,16] dpn:f32[8] dpo:f32[16,8] dpp:f32[1]
                  dpq:f32[8,1] dpr:f32[8] dps:f32[2,8] dpt:f32[16] dpu:f32[8,16]
                  dpv:f32[16] dpw:f32[16,16] dpx:f32[8] dpy:f32[16,8] dpz:f32[1]
                  dqa:f32[8,1] dqb:i32[]. let
                  
                in (dnh, dni, dnj, dnk, dnl, dnm, dnn, dno, dnp, dnq, dnr, dns, dnt,
                  dnu, dnv, dnw, dnx, dny, dnz, doa, dob, doc, dod, doe, dof, dog,
                  doh, doi, doj, dok, dol, dom, don, doo, dop, doq, dor, dos, dot,
                  dou, dov, dow, dox, doy, doz, dpa, dpb, dpc, dpd, dpe, dpf, dpg,
                  dph, dpi, dpj, dpk, dpl, dpm, dpn, dpo, dpp, dpq, dpr, dps, dpt,
                  dpu, dpv, dpw, dpx, dpy, dpz, dqa, dqb) }
              { lambda ; dqc:f32[8] dqd:f32[2,8] dqe:f32[16] dqf:f32[8,16] dqg:f32[16]
                  dqh:f32[16,16] dqi:f32[8] dqj:f32[16,8] dqk:f32[1] dql:f32[8,1]
                  dqm:f32[8] dqn:f32[2,8] dqo:f32[16] dqp:f32[8,16] dqq:f32[16] dqr:f32[16,16]
                  dqs:f32[8] dqt:f32[16,8] dqu:f32[1] dqv:f32[8,1] dqw:f32[] dqx:f32[8]
                  dqy:f32[2,8] dqz:f32[16] dra:f32[8,16] drb:f32[16] drc:f32[16,16]
                  drd:f32[8] dre:f32[16,8] drf:f32[1] drg:f32[8,1] drh:f32[8] dri:f32[2,8]
                  drj:f32[16] drk:f32[8,16] drl:f32[16] drm:f32[16,16] drn:f32[8]
                  dro:f32[16,8] drp:f32[1] drq:f32[8,1] drr:f32[8] drs:f32[2,8] drt:f32[16]
                  dru:f32[8,16] drv:f32[16] drw:f32[16,16] drx:f32[8] dry:f32[16,8]
                  drz:f32[1] dsa:f32[8,1] dsb:f32[] dsc:f32[8] dsd:f32[2,8] dse:f32[16]
                  dsf:f32[8,16] dsg:f32[16] dsh:f32[16,16] dsi:f32[8] dsj:f32[16,8]
                  dsk:f32[1] dsl:f32[8,1] dsm:f32[8] dsn:f32[2,8] dso:f32[16] dsp:f32[8,16]
                  dsq:f32[16] dsr:f32[16,16] dss:f32[8] dst:f32[16,8] dsu:f32[1]
                  dsv:f32[8,1] dsw:i32[] dsx_:f32[8] dsy_:f32[2,8] dsz_:f32[16] dta_:f32[8,16]
                  dtb_:f32[16] dtc_:f32[16,16] dtd_:f32[8] dte_:f32[16,8] dtf_:f32[1]
                  dtg_:f32[8,1] dth_:f32[8] dti_:f32[2,8] dtj_:f32[16] dtk_:f32[8,16]
                  dtl_:f32[16] dtm_:f32[16,16] dtn_:f32[8] dto_:f32[16,8] dtp_:f32[1]
                  dtq_:f32[8,1] dtr_:f32[] dts_:f32[8] dtt_:f32[2,8] dtu_:f32[16]
                  dtv_:f32[8,16] dtw_:f32[16] dtx_:f32[16,16] dty_:f32[8] dtz_:f32[16,8]
                  dua_:f32[1] dub_:f32[8,1] duc_:f32[8] dud_:f32[2,8] due_:f32[16]
                  duf_:f32[8,16] dug_:f32[16] duh_:f32[16,16] dui_:f32[8] duj_:f32[16,8]
                  duk_:f32[1] dul_:f32[8,1] dum_:f32[8] dun_:f32[2,8] duo_:f32[16]
                  dup_:f32[8,16] duq_:f32[16] dur_:f32[16,16] dus_:f32[8] dut_:f32[16,8]
                  duu_:f32[1] duv_:f32[8,1] duw_:f32[] dux_:f32[8] duy_:f32[2,8]
                  duz_:f32[16] dva_:f32[8,16] dvb_:f32[16] dvc_:f32[16,16] dvd_:f32[8]
                  dve_:f32[16,8] dvf_:f32[1] dvg_:f32[8,1] dvh_:f32[8] dvi_:f32[2,8]
                  dvj_:f32[16] dvk_:f32[8,16] dvl_:f32[16] dvm_:f32[16,16] dvn_:f32[8]
                  dvo_:f32[16,8] dvp_:f32[1] dvq_:f32[8,1] dvr_:i32[]. let
                  
                in (dqc, dqd, dqe, dqf, dqg, dqh, dqi, dqj, dqk, dql, dqm, dqn, dqo,
                  dqp, dqq, dqr, dqs, dqt, dqu, dqv, dqw, dqx, dqy, dqz, dra, drb,
                  drc, drd, dre, drf, drg, drh, dri, drj, drk, drl, drm, drn, dro,
                  drp, drq, drr, drs, drt, dru, drv, drw, drx, dry, drz, dsa, dsb,
                  dsc, dsd, dse, dsf, dsg, dsh, dsi, dsj, dsk, dsl, dsm, dsn, dso,
                  dsp, dsq, dsr, dss, dst, dsu, dsv, dsw) }
            )
            linear=(False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False)
          ] dhq zt zu zv zw zx zy zz baa bab bac bad bae baf bag bah bai baj bak
            bal bam ban bao bap baq bar bas bat bau bav baw bax bay baz bba bbb bbc
            bbd bbe bbf bbg bbh bbi bbj bbk bbl bbm bbn bbo bbp bbq bbr bbs bbt bbu
            bbv bbw bbx bby bbz bca bcb bcc bcd bce bcf bcg bch bci bcj bck bcl bcm
            bcn bay baz bba bbb bbc bbd bbe bbf bbg bbh bbi bbj bbk bbl bbm bbn bbo
            bbp bbq bbr bbs bbt bbu bbv bbw bbx bby bbz bca bcb bcc zt zu zv zw zx
            zy zz baa bab bac bad bae baf bag bah bai baj bak bal bam ban bao bap
            baq bar bas bat bau bav baw bax bcd bce bcf bcg bch bci bcj bck bcl bcm
            bcn
          dvs:bool[] = or bcs bct
          dvt:i32[] = convert_element_type[new_dtype=int32 weak_type=False] dvs
          dvu:f32[8] dvv:f32[2,8] dvw:f32[16] dvx:f32[8,16] dvy:f32[16] dvz:f32[16,16]
            dwa:f32[8] dwb:f32[16,8] dwc:f32[1] dwd:f32[8,1] dwe:f32[8] dwf:f32[2,8]
            dwg:f32[16] dwh:f32[8,16] dwi:f32[16] dwj:f32[16,16] dwk:f32[8] dwl:f32[16,8]
            dwm:f32[1] dwn:f32[8,1] dwo:f32[] dwp:f32[8] dwq:f32[2,8] dwr:f32[16]
            dws:f32[8,16] dwt:f32[16] dwu:f32[16,16] dwv:f32[8] dww:f32[16,8] dwx:f32[1]
            dwy:f32[8,1] dwz:f32[] dxa:f32[] dxb:f32[] = cond[
            branches=(
              { lambda ; dxc:u32[2] dxd:f32[8] dxe:f32[2,8] dxf:f32[16] dxg:f32[8,16]
                  dxh:f32[16] dxi:f32[16,16] dxj:f32[8] dxk:f32[16,8] dxl:f32[1]
                  dxm:f32[8,1] dxn:f32[8] dxo:f32[2,8] dxp:f32[16] dxq:f32[8,16]
                  dxr:f32[16] dxs:f32[16,16] dxt:f32[8] dxu:f32[16,8] dxv:f32[1]
                  dxw:f32[8,1] dxx:f32[] dxy:f32[8] dxz:f32[2,8] dya:f32[16] dyb:f32[8,16]
                  dyc:f32[16] dyd:f32[16,16] dye:f32[8] dyf:f32[16,8] dyg:f32[1]
                  dyh:f32[8,1] dyi:f32[] dyj:f32[] dyk:f32[] dyl:f32[8] dym:f32[2,8]
                  dyn:f32[16] dyo:f32[8,16] dyp:f32[16] dyq:f32[16,16] dyr:f32[8]
                  dys:f32[16,8] dyt:f32[1] dyu:f32[8,1] dyv:f32[8] dyw:f32[2,8] dyx:f32[16]
                  dyy:f32[8,16] dyz:f32[16] dza:f32[16,16] dzb:f32[8] dzc:f32[16,8]
                  dzd:f32[1] dze:f32[8,1] dzf:f32[] dzg:f32[8] dzh:f32[2,8] dzi:f32[16]
                  dzj:f32[8,16] dzk:f32[16] dzl:f32[16,16] dzm:f32[8] dzn:f32[16,8]
                  dzo:f32[1] dzp:f32[8,1] dzq:f32[] dzr:f32[] dzs:f32[]. let
                  dzt:f32[] = convert_element_type[
                    new_dtype=float32
                    weak_type=False
                  ] dyj
                  dzu:f32[] = sub dzr dzt
                  dzv:f32[] = exp dzu
                  dzw:f32[] = xla_call[
                    call_jaxpr={ lambda ; dzx:f32[] dzy:i32[]. let
                        dzz:f32[] = convert_element_type[
                          new_dtype=float32
                          weak_type=False
                        ] dzy
                        eaa:f32[] = min dzz dzx
                      in (eaa,) }
                    name=clip
                  ] dzv 1
                  eab:key<fry>[] = random_wrap[impl=fry] dxc
                  eac:u32[] = random_bits[bit_width=32 shape=()] eab
                  ead:u32[] = shift_right_logical eac 9
                  eae:u32[] = or ead 1065353216
                  eaf:f32[] = bitcast_convert_type[new_dtype=float32] eae
                  eag:f32[] = sub eaf 1.0
                  eah:f32[] = sub 1.0 0.0
                  eai:f32[] = mul eag eah
                  eaj:f32[] = add eai 0.0
                  eak:f32[] = reshape[dimensions=None new_sizes=()] eaj
                  eal:f32[] = max 0.0 eak
                  eam:bool[] = lt eal dzw
                  ean:f32[] = custom_jvp_call[
                    call_jaxpr={ lambda ; eao:f32[] eap:f32[]. let
                        eaq:f32[] = xla_call[
                          call_jaxpr={ lambda ; ear:f32[] eas:f32[]. let
                              eat:f32[] = convert_element_type[
                                new_dtype=float32
                                weak_type=False
                              ] ear
                              eau:f32[] = max eat eas
                              eav:f32[] = sub eat eas
                              eaw:bool[] = ne eav eav
                              eax:f32[] = add eat eas
                              eay:f32[] = abs eav
                              eaz:f32[] = neg eay
                              eba:f32[] = exp eaz
                              ebb:f32[] = log1p eba
                              ebc:f32[] = add eau ebb
                              ebd:f32[] = select_n eaw ebc eax
                            in (ebd,) }
                          name=logaddexp
                        ] eao eap
                      in (eaq,) }
                    jvp_jaxpr_thunk=<function _memoize.<locals>.memoized at 0x7fdcb0c4b710>
                    num_consts=0
                  ] dyj dzr
                  ebe:f32[] = custom_jvp_call[
                    call_jaxpr={ lambda ; ebf:f32[] ebg:f32[]. let
                        ebh:f32[] = xla_call[
                          call_jaxpr={ lambda ; ebi:f32[] ebj:f32[]. let
                              ebk:f32[] = convert_element_type[
                                new_dtype=float32
                                weak_type=False
                              ] ebi
                              ebl:f32[] = max ebk ebj
                              ebm:f32[] = sub ebk ebj
                              ebn:bool[] = ne ebm ebm
                              ebo:f32[] = add ebk ebj
                              ebp:f32[] = abs ebm
                              ebq:f32[] = neg ebp
                              ebr:f32[] = exp ebq
                              ebs:f32[] = log1p ebr
                              ebt:f32[] = add ebl ebs
                              ebu:f32[] = select_n ebn ebt ebo
                            in (ebu,) }
                          name=logaddexp
                        ] ebf ebg
                      in (ebh,) }
                    jvp_jaxpr_thunk=<function _memoize.<locals>.memoized at 0x7fdcb0c4bb00>
                    num_consts=0
                  ] dyk dzs
                  ebv:i32[] = convert_element_type[
                    new_dtype=int32
                    weak_type=False
                  ] eam
                  ebw:f32[8] ebx:f32[2,8] eby:f32[16] ebz:f32[8,16] eca:f32[16] ecb:f32[16,16]
                    ecc:f32[8] ecd:f32[16,8] ece:f32[1] ecf:f32[8,1] ecg:f32[8] ech:f32[2,8]
                    eci:f32[16] ecj:f32[8,16] eck:f32[16] ecl:f32[16,16] ecm:f32[8]
                    ecn:f32[16,8] eco:f32[1] ecp:f32[8,1] ecq:f32[] ecr:f32[8] ecs:f32[2,8]
                    ect:f32[16] ecu:f32[8,16] ecv:f32[16] ecw:f32[16,16] ecx:f32[8]
                    ecy:f32[16,8] ecz:f32[1] eda:f32[8,1] edb:f32[] edc:f32[] edd:f32[] = cond[
                    branches=(
                      { lambda ; ede_:f32[8] edf_:f32[2,8] edg_:f32[16] edh_:f32[8,16]
                          edi_:f32[16] edj_:f32[16,16] edk_:f32[8] edl_:f32[16,8]
                          edm_:f32[1] edn_:f32[8,1] edo_:f32[8] edp_:f32[2,8] edq_:f32[16]
                          edr_:f32[8,16] eds_:f32[16] edt_:f32[16,16] edu_:f32[8]
                          edv_:f32[16,8] edw_:f32[1] edx_:f32[8,1] edy_:f32[] edz_:f32[8]
                          eea_:f32[2,8] eeb_:f32[16] eec_:f32[8,16] eed_:f32[16]
                          eee_:f32[16,16] eef_:f32[8] eeg_:f32[16,8] eeh_:f32[1]
                          eei_:f32[8,1] eej_:f32[] eek_:f32[] eel_:f32[] eem:f32[8]
                          een:f32[2,8] eeo:f32[16] eep:f32[8,16] eeq:f32[16] eer:f32[16,16]
                          ees:f32[8] eet:f32[16,8] eeu:f32[1] eev:f32[8,1] eew:f32[8]
                          eex:f32[2,8] eey:f32[16] eez:f32[8,16] efa:f32[16] efb:f32[16,16]
                          efc:f32[8] efd:f32[16,8] efe:f32[1] eff:f32[8,1] efg:f32[]
                          efh:f32[8] efi:f32[2,8] efj:f32[16] efk:f32[8,16] efl:f32[16]
                          efm:f32[16,16] efn:f32[8] efo:f32[16,8] efp:f32[1] efq:f32[8,1]
                          efr:f32[] efs:f32[] eft:f32[]. let
                          
                        in (eem, een, eeo, eep, eeq, eer, ees, eet, eeu, eev, eew,
                          eex, eey, eez, efa, efb, efc, efd, efe, eff, efg, efh,
                          efi, efj, efk, efl, efm, efn, efo, efp, efq, efr, efs,
                          eft) }
                      { lambda ; efu:f32[8] efv:f32[2,8] efw:f32[16] efx:f32[8,16]
                          efy:f32[16] efz:f32[16,16] ega:f32[8] egb:f32[16,8] egc:f32[1]
                          egd:f32[8,1] ege:f32[8] egf:f32[2,8] egg:f32[16] egh:f32[8,16]
                          egi:f32[16] egj:f32[16,16] egk:f32[8] egl:f32[16,8] egm:f32[1]
                          egn:f32[8,1] ego:f32[] egp:f32[8] egq:f32[2,8] egr:f32[16]
                          egs:f32[8,16] egt:f32[16] egu:f32[16,16] egv:f32[8] egw:f32[16,8]
                          egx:f32[1] egy:f32[8,1] egz:f32[] eha:f32[] ehb:f32[] ehc_:f32[8]
                          ehd_:f32[2,8] ehe_:f32[16] ehf_:f32[8,16] ehg_:f32[16]
                          ehh_:f32[16,16] ehi_:f32[8] ehj_:f32[16,8] ehk_:f32[1]
                          ehl_:f32[8,1] ehm_:f32[8] ehn_:f32[2,8] eho_:f32[16] ehp_:f32[8,16]
                          ehq_:f32[16] ehr_:f32[16,16] ehs_:f32[8] eht_:f32[16,8]
                          ehu_:f32[1] ehv_:f32[8,1] ehw_:f32[] ehx_:f32[8] ehy_:f32[2,8]
                          ehz_:f32[16] eia_:f32[8,16] eib_:f32[16] eic_:f32[16,16]
                          eid_:f32[8] eie_:f32[16,8] eif_:f32[1] eig_:f32[8,1] eih_:f32[]
                          eii_:f32[] eij_:f32[]. let
                          
                        in (efu, efv, efw, efx, efy, efz, ega, egb, egc, egd, ege,
                          egf, egg, egh, egi, egj, egk, egl, egm, egn, ego, egp,
                          egq, egr, egs, egt, egu, egv, egw, egx, egy, egz, eha,
                          ehb) }
                    )
                    linear=(False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False)
                  ] ebv dyl dym dyn dyo dyp dyq dyr dys dyt dyu dyv dyw dyx dyy dyz
                    dza dzb dzc dzd dze dzf dzg dzh dzi dzj dzk dzl dzm dzn dzo dzp
                    dzq ean ebe dxd dxe dxf dxg dxh dxi dxj dxk dxl dxm dxn dxo dxp
                    dxq dxr dxs dxt dxu dxv dxw dxx dxy dxz dya dyb dyc dyd dye dyf
                    dyg dyh dyi ean ebe
                in (ebw, ebx, eby, ebz, eca, ecb, ecc, ecd, ece, ecf, ecg, ech, eci,
                  ecj, eck, ecl, ecm, ecn, eco, ecp, ecq, ecr, ecs, ect, ecu, ecv,
                  ecw, ecx, ecy, ecz, eda, edb, edc, edd) }
              { lambda ; eik:u32[2] eil:f32[8] eim:f32[2,8] ein:f32[16] eio:f32[8,16]
                  eip:f32[16] eiq:f32[16,16] eir:f32[8] eis:f32[16,8] eit:f32[1]
                  eiu:f32[8,1] eiv:f32[8] eiw:f32[2,8] eix:f32[16] eiy:f32[8,16]
                  eiz:f32[16] eja:f32[16,16] ejb:f32[8] ejc:f32[16,8] ejd:f32[1]
                  eje:f32[8,1] ejf:f32[] ejg:f32[8] ejh:f32[2,8] eji:f32[16] ejj:f32[8,16]
                  ejk:f32[16] ejl:f32[16,16] ejm:f32[8] ejn:f32[16,8] ejo:f32[1]
                  ejp:f32[8,1] ejq:f32[] ejr:f32[] ejs:f32[] ejt:f32[8] eju:f32[2,8]
                  ejv:f32[16] ejw:f32[8,16] ejx:f32[16] ejy:f32[16,16] ejz:f32[8]
                  eka:f32[16,8] ekb:f32[1] ekc:f32[8,1] ekd:f32[8] eke:f32[2,8] ekf:f32[16]
                  ekg:f32[8,16] ekh:f32[16] eki:f32[16,16] ekj:f32[8] ekk:f32[16,8]
                  ekl:f32[1] ekm:f32[8,1] ekn:f32[] eko:f32[8] ekp:f32[2,8] ekq:f32[16]
                  ekr:f32[8,16] eks:f32[16] ekt:f32[16,16] eku:f32[8] ekv:f32[16,8]
                  ekw:f32[1] ekx:f32[8,1] eky:f32[] ekz:f32[] ela:f32[]. let
                  elb:f32[] = custom_jvp_call[
                    call_jaxpr={ lambda ; elc:f32[] eld:f32[]. let
                        ele:f32[] = xla_call[
                          call_jaxpr={ lambda ; elf:f32[] elg:f32[]. let
                              elh:f32[] = convert_element_type[
                                new_dtype=float32
                                weak_type=False
                              ] elf
                              eli:f32[] = max elh elg
                              elj:f32[] = sub elh elg
                              elk:bool[] = ne elj elj
                              ell:f32[] = add elh elg
                              elm:f32[] = abs elj
                              eln:f32[] = neg elm
                              elo:f32[] = exp eln
                              elp:f32[] = log1p elo
                              elq:f32[] = add eli elp
                              elr:f32[] = select_n elk elq ell
                            in (elr,) }
                          name=logaddexp
                        ] elc eld
                      in (ele,) }
                    jvp_jaxpr_thunk=<function _memoize.<locals>.memoized at 0x7fdcb0c4b4d0>
                    num_consts=0
                  ] ejs ela
                in (eil, eim, ein, eio, eip, eiq, eir, eis, eit, eiu, eiv, eiw, eix,
                  eiy, eiz, eja, ejb, ejc, ejd, eje, ejf, ejg, ejh, eji, ejj, ejk,
                  ejl, ejm, ejn, ejo, ejp, ejq, ejr, elb) }
            )
            linear=(False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False)
          ] dvt oi jp jq jr js jt ju jv jw jx jy jz ka kb kc kd ke kf kg kh ki kj
            kk kl km kn ko kp kq kr ks kt ku kv kw yl ym yn yo yp yq yr ys yt yu
            yv yw yx yy yz za zb zc zd ze zf zg zh zi zj zk zl zm zn zo zp zq zr
            zs
          els:bool[] = gt ov 0
          elt:i32[] = convert_element_type[new_dtype=int32 weak_type=False] els
          elu:f32[8] elv:f32[2,8] elw:f32[16] elx:f32[8,16] ely:f32[16] elz:f32[16,16]
            ema:f32[8] emb:f32[16,8] emc:f32[1] emd:f32[8,1] eme:f32[8] emf:f32[2,8]
            emg:f32[16] emh:f32[8,16] emi:f32[16] emj:f32[16,16] emk:f32[8] eml:f32[16,8]
            emm:f32[1] emn:f32[8,1] emo:f32[] emp:f32[8] emq:f32[2,8] emr:f32[16]
            ems:f32[8,16] emt:f32[16] emu:f32[16,16] emv:f32[8] emw:f32[16,8] emx:f32[1]
            emy:f32[8,1] _:f32[8] _:f32[2,8] _:f32[16] _:f32[8,16] _:f32[16] _:f32[16,16]
            _:f32[8] _:f32[16,8] _:f32[1] _:f32[8,1] _:f32[8] _:f32[2,8] _:f32[16]
            _:f32[8,16] _:f32[16] _:f32[16,16] _:f32[8] _:f32[16,8] _:f32[1] _:f32[8,1]
            _:f32[] _:f32[8] _:f32[2,8] _:f32[16] _:f32[8,16] _:f32[16] _:f32[16,16]
            _:f32[8] _:f32[16,8] _:f32[1] _:f32[8,1] emz:f32[8] ena:f32[2,8] enb:f32[16]
            enc:f32[8,16] end:f32[16] ene:f32[16,16] enf:f32[8] eng:f32[16,8] enh:f32[1]
            eni:f32[8,1] enj:i32[] _:f32[8] _:f32[2,8] _:f32[16] _:f32[8,16] _:f32[16]
            _:f32[16,16] _:f32[8] _:f32[16,8] _:f32[1] _:f32[8,1] _:f32[8] _:f32[2,8]
            _:f32[16] _:f32[8,16] _:f32[16] _:f32[16,16] _:f32[8] _:f32[16,8] _:f32[1]
            _:f32[8,1] _:f32[] _:f32[8] _:f32[2,8] _:f32[16] _:f32[8,16] _:f32[16]
            _:f32[16,16] _:f32[8] _:f32[16,8] _:f32[1] _:f32[8,1] enk:f32[8] enl:f32[2,8]
            enm:f32[16] enn:f32[8,16] eno:f32[16] enp:f32[16,16] enq:f32[8] enr:f32[16,8]
            ens:f32[1] ent:f32[8,1] enu:f32[8] env:f32[2,8] enw:f32[16] enx:f32[8,16]
            eny:f32[16] enz:f32[16,16] eoa:f32[8] eob:f32[16,8] eoc:f32[1] eod:f32[8,1]
            eoe:f32[] eof:f32[8] eog:f32[2,8] eoh:f32[16] eoi:f32[8,16] eoj:f32[16]
            eok:f32[16,16] eol:f32[8] eom:f32[16,8] eon:f32[1] eoo:f32[8,1] eop:f32[8]
            eoq:f32[2,8] eor:f32[16] eos:f32[8,16] eot:f32[16] eou:f32[16,16] eov:f32[8]
            eow:f32[16,8] eox:f32[1] eoy:f32[8,1] eoz:i32[] = cond[
            branches=(
              { lambda ; epa_:f32[8] epb_:f32[2,8] epc_:f32[16] epd_:f32[8,16] epe_:f32[16]
                  epf_:f32[16,16] epg_:f32[8] eph_:f32[16,8] epi_:f32[1] epj_:f32[8,1]
                  epk_:f32[8] epl_:f32[2,8] epm_:f32[16] epn_:f32[8,16] epo_:f32[16]
                  epp_:f32[16,16] epq_:f32[8] epr_:f32[16,8] eps_:f32[1] ept_:f32[8,1]
                  epu_:f32[] epv_:f32[8] epw_:f32[2,8] epx_:f32[16] epy_:f32[8,16]
                  epz_:f32[16] eqa_:f32[16,16] eqb_:f32[8] eqc_:f32[16,8] eqd_:f32[1]
                  eqe_:f32[8,1] eqf_:f32[8] eqg_:f32[2,8] eqh_:f32[16] eqi_:f32[8,16]
                  eqj_:f32[16] eqk_:f32[16,16] eql_:f32[8] eqm_:f32[16,8] eqn_:f32[1]
                  eqo_:f32[8,1] eqp_:f32[8] eqq_:f32[2,8] eqr_:f32[16] eqs_:f32[8,16]
                  eqt_:f32[16] equ_:f32[16,16] eqv_:f32[8] eqw_:f32[16,8] eqx_:f32[1]
                  eqy_:f32[8,1] eqz_:f32[] era_:f32[8] erb_:f32[2,8] erc_:f32[16]
                  erd_:f32[8,16] ere_:f32[16] erf_:f32[16,16] erg_:f32[8] erh_:f32[16,8]
                  eri_:f32[1] erj_:f32[8,1] erk_:f32[8] erl_:f32[2,8] erm_:f32[16]
                  ern_:f32[8,16] ero_:f32[16] erp_:f32[16,16] erq_:f32[8] err_:f32[16,8]
                  ers_:f32[1] ert_:f32[8,1] eru_:i32[] erv_:f32[8] erw_:f32[2,8]
                  erx_:f32[16] ery_:f32[8,16] erz_:f32[16] esa_:f32[16,16] esb_:f32[8]
                  esc_:f32[16,8] esd_:f32[1] ese_:f32[8,1] esf_:f32[8] esg_:f32[2,8]
                  esh_:f32[16] esi_:f32[8,16] esj_:f32[16] esk_:f32[16,16] esl_:f32[8]
                  esm_:f32[16,8] esn_:f32[1] eso_:f32[8,1] esp_:f32[] esq_:f32[8]
                  esr_:f32[2,8] ess_:f32[16] est_:f32[8,16] esu_:f32[16] esv_:f32[16,16]
                  esw_:f32[8] esx_:f32[16,8] esy_:f32[1] esz_:f32[8,1] eta_:f32[8]
                  etb_:f32[2,8] etc_:f32[16] etd_:f32[8,16] ete_:f32[16] etf_:f32[16,16]
                  etg_:f32[8] eth_:f32[16,8] eti_:f32[1] etj_:f32[8,1] etk_:f32[8]
                  etl_:f32[2,8] etm_:f32[16] etn_:f32[8,16] eto_:f32[16] etp_:f32[16,16]
                  etq_:f32[8] etr_:f32[16,8] ets_:f32[1] ett_:f32[8,1] etu_:f32[]
                  etv_:f32[8] etw_:f32[2,8] etx_:f32[16] ety_:f32[8,16] etz_:f32[16]
                  eua_:f32[16,16] eub_:f32[8] euc_:f32[16,8] eud_:f32[1] eue_:f32[8,1]
                  euf_:f32[8] eug_:f32[2,8] euh_:f32[16] eui_:f32[8,16] euj_:f32[16]
                  euk_:f32[16,16] eul_:f32[8] eum_:f32[16,8] eun_:f32[1] euo_:f32[8,1]
                  eup_:i32[] euq:f32[8] eur:f32[2,8] eus:f32[16] eut:f32[8,16] euu:f32[16]
                  euv:f32[16,16] euw:f32[8] eux:f32[16,8] euy:f32[1] euz:f32[8,1]
                  eva:f32[8] evb:f32[2,8] evc:f32[16] evd:f32[8,16] eve:f32[16] evf:f32[16,16]
                  evg:f32[8] evh:f32[16,8] evi:f32[1] evj:f32[8,1] evk:f32[] evl:f32[8]
                  evm:f32[2,8] evn:f32[16] evo:f32[8,16] evp:f32[16] evq:f32[16,16]
                  evr:f32[8] evs:f32[16,8] evt:f32[1] evu:f32[8,1] evv:f32[8] evw:f32[2,8]
                  evx:f32[16] evy:f32[8,16] evz:f32[16] ewa:f32[16,16] ewb:f32[8]
                  ewc:f32[16,8] ewd:f32[1] ewe:f32[8,1] ewf:f32[8] ewg:f32[2,8] ewh:f32[16]
                  ewi:f32[8,16] ewj:f32[16] ewk:f32[16,16] ewl:f32[8] ewm:f32[16,8]
                  ewn:f32[1] ewo:f32[8,1] ewp:f32[] ewq:f32[8] ewr:f32[2,8] ews:f32[16]
                  ewt:f32[8,16] ewu:f32[16] ewv:f32[16,16] eww:f32[8] ewx:f32[16,8]
                  ewy:f32[1] ewz:f32[8,1] exa:f32[8] exb:f32[2,8] exc:f32[16] exd:f32[8,16]
                  exe:f32[16] exf:f32[16,16] exg:f32[8] exh:f32[16,8] exi:f32[1]
                  exj:f32[8,1] exk:i32[] exl:f32[8] exm:f32[2,8] exn:f32[16] exo:f32[8,16]
                  exp:f32[16] exq:f32[16,16] exr:f32[8] exs:f32[16,8] ext:f32[1]
                  exu:f32[8,1] exv:f32[8] exw:f32[2,8] exx:f32[16] exy:f32[8,16]
                  exz:f32[16] eya:f32[16,16] eyb:f32[8] eyc:f32[16,8] eyd:f32[1]
                  eye:f32[8,1] eyf:f32[] eyg:f32[8] eyh:f32[2,8] eyi:f32[16] eyj:f32[8,16]
                  eyk:f32[16] eyl:f32[16,16] eym:f32[8] eyn:f32[16,8] eyo:f32[1]
                  eyp:f32[8,1] eyq:f32[8] eyr:f32[2,8] eys:f32[16] eyt:f32[8,16]
                  eyu:f32[16] eyv:f32[16,16] eyw:f32[8] eyx:f32[16,8] eyy:f32[1]
                  eyz:f32[8,1] eza:f32[8] ezb:f32[2,8] ezc:f32[16] ezd:f32[8,16]
                  eze:f32[16] ezf:f32[16,16] ezg:f32[8] ezh:f32[16,8] ezi:f32[1]
                  ezj:f32[8,1] ezk:f32[] ezl:f32[8] ezm:f32[2,8] ezn:f32[16] ezo:f32[8,16]
                  ezp:f32[16] ezq:f32[16,16] ezr:f32[8] ezs:f32[16,8] ezt:f32[1]
                  ezu:f32[8,1] ezv:f32[8] ezw:f32[2,8] ezx:f32[16] ezy:f32[8,16]
                  ezz:f32[16] faa:f32[16,16] fab:f32[8] fac:f32[16,8] fad:f32[1]
                  fae:f32[8,1] faf:i32[]. let
                  
                in (euq, eur, eus, eut, euu, euv, euw, eux, euy, euz, eva, evb, evc,
                  evd, eve, evf, evg, evh, evi, evj, evk, evl, evm, evn, evo, evp,
                  evq, evr, evs, evt, evu, evv, evw, evx, evy, evz, ewa, ewb, ewc,
                  ewd, ewe, ewf, ewg, ewh, ewi, ewj, ewk, ewl, ewm, ewn, ewo, ewp,
                  ewq, ewr, ews, ewt, ewu, ewv, eww, ewx, ewy, ewz, exa, exb, exc,
                  exd, exe, exf, exg, exh, exi, exj, exk, exl, exm, exn, exo, exp,
                  exq, exr, exs, ext, exu, exv, exw, exx, exy, exz, eya, eyb, eyc,
                  eyd, eye, eyf, eyg, eyh, eyi, eyj, eyk, eyl, eym, eyn, eyo, eyp,
                  eyq, eyr, eys, eyt, eyu, eyv, eyw, eyx, eyy, eyz, eza, ezb, ezc,
                  ezd, eze, ezf, ezg, ezh, ezi, ezj, ezk, ezl, ezm, ezn, ezo, ezp,
                  ezq, ezr, ezs, ezt, ezu, ezv, ezw, ezx, ezy, ezz, faa, fab, fac,
                  fad, fae, faf) }
              { lambda ; fag:f32[8] fah:f32[2,8] fai:f32[16] faj:f32[8,16] fak:f32[16]
                  fal:f32[16,16] fam:f32[8] fan:f32[16,8] fao:f32[1] fap:f32[8,1]
                  faq:f32[8] far:f32[2,8] fas:f32[16] fat:f32[8,16] fau:f32[16] fav:f32[16,16]
                  faw:f32[8] fax:f32[16,8] fay:f32[1] faz:f32[8,1] fba:f32[] fbb:f32[8]
                  fbc:f32[2,8] fbd:f32[16] fbe:f32[8,16] fbf:f32[16] fbg:f32[16,16]
                  fbh:f32[8] fbi:f32[16,8] fbj:f32[1] fbk:f32[8,1] fbl:f32[8] fbm:f32[2,8]
                  fbn:f32[16] fbo:f32[8,16] fbp:f32[16] fbq:f32[16,16] fbr:f32[8]
                  fbs:f32[16,8] fbt:f32[1] fbu:f32[8,1] fbv:f32[8] fbw:f32[2,8] fbx:f32[16]
                  fby:f32[8,16] fbz:f32[16] fca:f32[16,16] fcb:f32[8] fcc:f32[16,8]
                  fcd:f32[1] fce:f32[8,1] fcf:f32[] fcg:f32[8] fch:f32[2,8] fci:f32[16]
                  fcj:f32[8,16] fck:f32[16] fcl:f32[16,16] fcm:f32[8] fcn:f32[16,8]
                  fco:f32[1] fcp:f32[8,1] fcq:f32[8] fcr:f32[2,8] fcs:f32[16] fct:f32[8,16]
                  fcu:f32[16] fcv:f32[16,16] fcw:f32[8] fcx:f32[16,8] fcy:f32[1]
                  fcz:f32[8,1] fda:i32[] fdb:f32[8] fdc:f32[2,8] fdd:f32[16] fde:f32[8,16]
                  fdf:f32[16] fdg:f32[16,16] fdh:f32[8] fdi:f32[16,8] fdj:f32[1]
                  fdk:f32[8,1] fdl:f32[8] fdm:f32[2,8] fdn:f32[16] fdo:f32[8,16]
                  fdp:f32[16] fdq:f32[16,16] fdr:f32[8] fds:f32[16,8] fdt:f32[1]
                  fdu:f32[8,1] fdv:f32[] fdw:f32[8] fdx:f32[2,8] fdy:f32[16] fdz:f32[8,16]
                  fea:f32[16] feb:f32[16,16] fec:f32[8] fed:f32[16,8] fee:f32[1]
                  fef:f32[8,1] feg:f32[8] feh:f32[2,8] fei:f32[16] fej:f32[8,16]
                  fek:f32[16] fel:f32[16,16] fem:f32[8] fen:f32[16,8] feo:f32[1]
                  fep:f32[8,1] feq:f32[8] fer:f32[2,8] fes:f32[16] fet:f32[8,16]
                  feu:f32[16] fev:f32[16,16] few:f32[8] fex:f32[16,8] fey:f32[1]
                  fez:f32[8,1] ffa:f32[] ffb:f32[8] ffc:f32[2,8] ffd:f32[16] ffe:f32[8,16]
                  fff:f32[16] ffg:f32[16,16] ffh:f32[8] ffi:f32[16,8] ffj:f32[1]
                  ffk:f32[8,1] ffl:f32[8] ffm:f32[2,8] ffn:f32[16] ffo:f32[8,16]
                  ffp:f32[16] ffq:f32[16,16] ffr:f32[8] ffs:f32[16,8] fft:f32[1]
                  ffu:f32[8,1] ffv:i32[] ffw_:f32[8] ffx_:f32[2,8] ffy_:f32[16] ffz_:f32[8,16]
                  fga_:f32[16] fgb_:f32[16,16] fgc_:f32[8] fgd_:f32[16,8] fge_:f32[1]
                  fgf_:f32[8,1] fgg_:f32[8] fgh_:f32[2,8] fgi_:f32[16] fgj_:f32[8,16]
                  fgk_:f32[16] fgl_:f32[16,16] fgm_:f32[8] fgn_:f32[16,8] fgo_:f32[1]
                  fgp_:f32[8,1] fgq_:f32[] fgr_:f32[8] fgs_:f32[2,8] fgt_:f32[16]
                  fgu_:f32[8,16] fgv_:f32[16] fgw_:f32[16,16] fgx_:f32[8] fgy_:f32[16,8]
                  fgz_:f32[1] fha_:f32[8,1] fhb_:f32[8] fhc_:f32[2,8] fhd_:f32[16]
                  fhe_:f32[8,16] fhf_:f32[16] fhg_:f32[16,16] fhh_:f32[8] fhi_:f32[16,8]
                  fhj_:f32[1] fhk_:f32[8,1] fhl_:f32[8] fhm_:f32[2,8] fhn_:f32[16]
                  fho_:f32[8,16] fhp_:f32[16] fhq_:f32[16,16] fhr_:f32[8] fhs_:f32[16,8]
                  fht_:f32[1] fhu_:f32[8,1] fhv_:f32[] fhw_:f32[8] fhx_:f32[2,8]
                  fhy_:f32[16] fhz_:f32[8,16] fia_:f32[16] fib_:f32[16,16] fic_:f32[8]
                  fid_:f32[16,8] fie_:f32[1] fif_:f32[8,1] fig_:f32[8] fih_:f32[2,8]
                  fii_:f32[16] fij_:f32[8,16] fik_:f32[16] fil_:f32[16,16] fim_:f32[8]
                  fin_:f32[16,8] fio_:f32[1] fip_:f32[8,1] fiq_:i32[] fir_:f32[8]
                  fis_:f32[2,8] fit_:f32[16] fiu_:f32[8,16] fiv_:f32[16] fiw_:f32[16,16]
                  fix_:f32[8] fiy_:f32[16,8] fiz_:f32[1] fja_:f32[8,1] fjb_:f32[8]
                  fjc_:f32[2,8] fjd_:f32[16] fje_:f32[8,16] fjf_:f32[16] fjg_:f32[16,16]
                  fjh_:f32[8] fji_:f32[16,8] fjj_:f32[1] fjk_:f32[8,1] fjl_:f32[]
                  fjm_:f32[8] fjn_:f32[2,8] fjo_:f32[16] fjp_:f32[8,16] fjq_:f32[16]
                  fjr_:f32[16,16] fjs_:f32[8] fjt_:f32[16,8] fju_:f32[1] fjv_:f32[8,1]
                  fjw_:f32[8] fjx_:f32[2,8] fjy_:f32[16] fjz_:f32[8,16] fka_:f32[16]
                  fkb_:f32[16,16] fkc_:f32[8] fkd_:f32[16,8] fke_:f32[1] fkf_:f32[8,1]
                  fkg_:f32[8] fkh_:f32[2,8] fki_:f32[16] fkj_:f32[8,16] fkk_:f32[16]
                  fkl_:f32[16,16] fkm_:f32[8] fkn_:f32[16,8] fko_:f32[1] fkp_:f32[8,1]
                  fkq_:f32[] fkr_:f32[8] fks_:f32[2,8] fkt_:f32[16] fku_:f32[8,16]
                  fkv_:f32[16] fkw_:f32[16,16] fkx_:f32[8] fky_:f32[16,8] fkz_:f32[1]
                  fla_:f32[8,1] flb_:f32[8] flc_:f32[2,8] fld_:f32[16] fle_:f32[8,16]
                  flf_:f32[16] flg_:f32[16,16] flh_:f32[8] fli_:f32[16,8] flj_:f32[1]
                  flk_:f32[8,1] fll_:i32[]. let
                  
                in (fag, fah, fai, faj, fak, fal, fam, fan, fao, fap, faq, far, fas,
                  fat, fau, fav, faw, fax, fay, faz, fba, fbb, fbc, fbd, fbe, fbf,
                  fbg, fbh, fbi, fbj, fbk, fbl, fbm, fbn, fbo, fbp, fbq, fbr, fbs,
                  fbt, fbu, fbv, fbw, fbx, fby, fbz, fca, fcb, fcc, fcd, fce, fcf,
                  fcg, fch, fci, fcj, fck, fcl, fcm, fcn, fco, fcp, fcq, fcr, fcs,
                  fct, fcu, fcv, fcw, fcx, fcy, fcz, fda, fdb, fdc, fdd, fde, fdf,
                  fdg, fdh, fdi, fdj, fdk, fdl, fdm, fdn, fdo, fdp, fdq, fdr, fds,
                  fdt, fdu, fdv, fdw, fdx, fdy, fdz, fea, feb, fec, fed, fee, fef,
                  feg, feh, fei, fej, fek, fel, fem, fen, feo, fep, feq, fer, fes,
                  fet, feu, fev, few, fex, fey, fez, ffa, ffb, ffc, ffd, ffe, fff,
                  ffg, ffh, ffi, ffj, ffk, ffl, ffm, ffn, ffo, ffp, ffq, ffr, ffs,
                  fft, ffu, ffv) }
            )
            linear=(False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False)
          ] elt kx ky kz la lb lc ld le lf lg lh li lj lk ll lm ln lo lp lq lr ls
            lt lu lv lw lx ly lz ma mb mc md me mf mg mh mi mj mk ml mm mn mo mp
            mq mr ms mt mu mv mw mx my mz na nb nc nd ne nf ng nh ni nj nk nl nm
            nn no np nq nr dhr dhs dht dhu dhv dhw dhx dhy dhz dia dib dic did die
            dif dig dih dii dij dik dil dim din dio dip diq dir dis dit diu div diw
            dix diy diz dja djb djc djd dje djf djg djh dji djj djk djl djm djn djo
            djp djq djr djs djt dju djv djw djx djy djz dka dkb dkc dkd dke dkf dkg
            dkh dki dkj dkk dkl dhr dhs dht dhu dhv dhw dhx dhy dhz dia dib dic did
            die dif dig dih dii dij dik dil dim din dio dip diq dir dis dit diu div
            diw dix diy diz dja djb djc djd dje djf djg djh dji djj djk djl djm djn
            djo djp djq djr djs djt dju djv djw djx djy djz dka dkb dkc dkd dke dkf
            dkg dkh dki dkj dkk dkl kx ky kz la lb lc ld le lf lg lh li lj lk ll
            lm ln lo lp lq lr ls lt lu lv lw lx ly lz ma mb mc md me mf mg mh mi
            mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd ne nf
            ng nh ni nj nk nl nm nn no np nq nr
          flm:f32[8] = add emz eop
          fln:f32[2,8] = add ena eoq
          flo:f32[16] = add enb eor
          flp:f32[8,16] = add enc eos
          flq:f32[16] = add end eot
          flr:f32[16,16] = add ene eou
          fls:f32[8] = add enf eov
          flt:f32[16,8] = add eng eow
          flu:f32[1] = add enh eox
          flv:f32[8,1] = add eni eoy
          flw:i32[] = add enj eoz
          flx:f32[16] = reshape[dimensions=None new_sizes=(16,)] emf
          fly:f32[128] = reshape[dimensions=None new_sizes=(128,)] emh
          flz:f32[256] = reshape[dimensions=None new_sizes=(256,)] emj
          fma:f32[128] = reshape[dimensions=None new_sizes=(128,)] eml
          fmb:f32[8] = reshape[dimensions=None new_sizes=(8,)] emn
          fmc:f32[585] = concatenate[dimension=0] eme flx emg fly emi flz emk fma
            emm fmb
          fmd:f32[16] = reshape[dimensions=None new_sizes=(16,)] env
          fme:f32[128] = reshape[dimensions=None new_sizes=(128,)] enx
          fmf:f32[256] = reshape[dimensions=None new_sizes=(256,)] enz
          fmg:f32[128] = reshape[dimensions=None new_sizes=(128,)] eob
          fmh:f32[8] = reshape[dimensions=None new_sizes=(8,)] eod
          fmi:f32[585] = concatenate[dimension=0] enu fmd enw fme eny fmf eoa fmg
            eoc fmh
          fmj:f32[16] = reshape[dimensions=None new_sizes=(16,)] fln
          fmk:f32[128] = reshape[dimensions=None new_sizes=(128,)] flp
          fml:f32[256] = reshape[dimensions=None new_sizes=(256,)] flr
          fmm:f32[128] = reshape[dimensions=None new_sizes=(128,)] flt
          fmn:f32[8] = reshape[dimensions=None new_sizes=(8,)] flv
          fmo:f32[585] = concatenate[dimension=0] flm fmj flo fmk flq fml fls fmm
            flu fmn
          fmp:f32[585] = mul ji fmc
          fmq:f32[585] = mul ji fmi
          fmr:f32[585] = add fmi fmc
          fms:f32[585] = div fmr 2.0
          fmt:f32[585] = sub fmo fms
          fmu:f32[] = dot_general[
            dimension_numbers=(((0,), (0,)), ((), ()))
            precision=None
            preferred_element_type=None
          ] fmp fmt
          fmv:bool[] = le fmu 0.0
          fmw:f32[] = dot_general[
            dimension_numbers=(((0,), (0,)), ((), ()))
            precision=None
            preferred_element_type=None
          ] fmq fmt
          fmx:bool[] = le fmw 0.0
          fmy:bool[] = or fmv fmx
          fmz:i32[] = add jo 1
          fna:bool[] = or bct fmy
        in (oc, fmz, dvu, dvv, dvw, dvx, dvy, dvz, dwa, dwb, dwc, dwd, dwe, dwf,
          dwg, dwh, dwi, dwj, dwk, dwl, dwm, dwn, dwo, dwp, dwq, dwr, dws, dwt, dwu,
          dwv, dww, dwx, dwy, dwz, dxa, dxb, elu, elv, elw, elx, ely, elz, ema, emb,
          emc, emd, eme, emf, emg, emh, emi, emj, emk, eml, emm, emn, emo, emp, emq,
          emr, ems, emt, emu, emv, emw, emx, emy, enk, enl, enm, enn, eno, enp, enq,
          enr, ens, ent, enu, env, enw, enx, eny, enz, eoa, eob, eoc, eod, eoe, eof,
          eog, eoh, eoi, eoj, eok, eol, eom, eon, eoo, flm, fln, flo, flp, flq, flr,
          fls, flt, flu, flv, flw, bco, bcp, bcq, bcr, bcs, fna) }
      body_nconsts=5
      cond_jaxpr={ lambda ; fnb:u32[2] fnc:i32[] fnd:f32[8] fne:f32[2,8] fnf:f32[16]
          fng:f32[8,16] fnh:f32[16] fni:f32[16,16] fnj:f32[8] fnk:f32[16,8] fnl:f32[1]
          fnm:f32[8,1] fnn:f32[8] fno:f32[2,8] fnp:f32[16] fnq:f32[8,16] fnr:f32[16]
          fns:f32[16,16] fnt:f32[8] fnu:f32[16,8] fnv:f32[1] fnw:f32[8,1] fnx:f32[]
          fny:f32[8] fnz:f32[2,8] foa:f32[16] fob:f32[8,16] foc:f32[16] fod:f32[16,16]
          foe:f32[8] fof:f32[16,8] fog:f32[1] foh:f32[8,1] foi:f32[] foj:f32[] fok:f32[]
          fol:f32[8] fom:f32[2,8] fon:f32[16] foo:f32[8,16] fop:f32[16] foq:f32[16,16]
          for:f32[8] fos:f32[16,8] fot:f32[1] fou:f32[8,1] fov:f32[8] fow:f32[2,8]
          fox:f32[16] foy:f32[8,16] foz:f32[16] fpa:f32[16,16] fpb:f32[8] fpc:f32[16,8]
          fpd:f32[1] fpe:f32[8,1] fpf:f32[] fpg:f32[8] fph:f32[2,8] fpi:f32[16] fpj:f32[8,16]
          fpk:f32[16] fpl:f32[16,16] fpm:f32[8] fpn:f32[16,8] fpo:f32[1] fpp:f32[8,1]
          fpq:f32[8] fpr:f32[2,8] fps:f32[16] fpt:f32[8,16] fpu:f32[16] fpv:f32[16,16]
          fpw:f32[8] fpx:f32[16,8] fpy:f32[1] fpz:f32[8,1] fqa:f32[8] fqb:f32[2,8]
          fqc:f32[16] fqd:f32[8,16] fqe:f32[16] fqf:f32[16,16] fqg:f32[8] fqh:f32[16,8]
          fqi:f32[1] fqj:f32[8,1] fqk:f32[] fql:f32[8] fqm:f32[2,8] fqn:f32[16] fqo:f32[8,16]
          fqp:f32[16] fqq:f32[16,16] fqr:f32[8] fqs:f32[16,8] fqt:f32[1] fqu:f32[8,1]
          fqv:f32[8] fqw:f32[2,8] fqx:f32[16] fqy:f32[8,16] fqz:f32[16] fra:f32[16,16]
          frb:f32[8] frc:f32[16,8] frd:f32[1] fre:f32[8,1] frf:i32[] frg:f32[10,585]
          frh:f32[10,585] fri:i32[] frj:i32[] frk:bool[] frl:bool[]. let
          frm:bool[] = lt fnc 10
          frn:bool[] = not frk
          fro:bool[] = convert_element_type[new_dtype=bool weak_type=False] frm
          frp:bool[] = convert_element_type[new_dtype=bool weak_type=False] frn
          frq:bool[] = and fro frp
          frr:bool[] = not frl
          frs:bool[] = convert_element_type[new_dtype=bool weak_type=False] frr
          frt:bool[] = and frq frs
        in (frt,) }
      cond_nconsts=0
    ] bc fw dn a b dw 0 c d e f g h i j k l er fb et fc ev fd ex fe ez ff m n o p
      q r s t u v w fw 0.0 -inf c d e f g h i j k l er fb et fc ev fd ex fe ez ff
      m n o p q r s t u v w c d e f g h i j k l er fb et fc ev fd ex fe ez ff m n
      o p q r s t u v w er fb et fc ev fd ex fe ez ff 0 fl fm 0 0 False False
    fru:f32[] = exp gu
    frv:f32[] = convert_element_type[new_dtype=float32 weak_type=False] jf
    frw:f32[] = div fru frv
    frx:i32[1] = slice[limit_indices=(1,) start_indices=(0,) strides=(1,)] bi
    fry:i32[] = squeeze[dimensions=(0,)] frx
    frz:i32[1] = slice[limit_indices=(2,) start_indices=(1,) strides=(1,)] bi
    fsa:i32[] = squeeze[dimensions=(0,)] frz
    fsb:i32[] = clamp 0 fry 1
    fsc:f32[] fsd:f32[] fse:i32[] fsf:f32[] fsg:f32[] fsh:f32[585] fsi:f32[585] fsj:f32[585]
      fsk:i32[] = cond[
      branches=(
        { lambda ; fsl:u32[2] fsm:f32[8] fsn:f32[2,8] fso:f32[16] fsp:f32[8,16] fsq:f32[16]
            fsr:f32[16,16] fss:f32[8] fst:f32[16,8] fsu:f32[1] fsv:f32[8,1] fsw:f32[]
            fsx:f32[8] fsy:f32[2,8] fsz:f32[16] fta:f32[8,16] ftb:f32[16] ftc:f32[16,16]
            ftd:f32[8] fte:f32[16,8] ftf:f32[1] ftg:f32[8,1] fth:f32[8] fti:f32[2,8]
            ftj:f32[16] ftk:f32[8,16] ftl:f32[16] ftm:f32[16,16] ftn:f32[8] fto:f32[16,8]
            ftp:f32[1] ftq:f32[8,1] ftr:bool[] fts:bool[] ftt:f32[] ftu:f32[8] ftv:f32[2,8]
            ftw:f32[16] ftx:f32[8,16] fty:f32[16] ftz:f32[16,16] fua:f32[8] fub:f32[16,8]
            fuc:f32[1] fud:f32[8,1] fue:f32[8] fuf:f32[2,8] fug:f32[16] fuh:f32[8,16]
            fui:f32[16] fuj:f32[16,16] fuk:f32[8] ful:f32[16,8] fum:f32[1] fun:f32[8,1]
            fuo:f32[] fup:f32[8] fuq:f32[2,8] fur:f32[16] fus:f32[8,16] fut:f32[16]
            fuu:f32[16,16] fuv:f32[8] fuw:f32[16,8] fux:f32[1] fuy:f32[8,1] fuz:f32[8]
            fva:f32[2,8] fvb:f32[16] fvc:f32[8,16] fvd:f32[16] fve:f32[16,16] fvf:f32[8]
            fvg:f32[16,8] fvh:f32[1] fvi:f32[8,1] fvj:f32[8] fvk:f32[2,8] fvl:f32[16]
            fvm:f32[8,16] fvn:f32[16] fvo:f32[16,16] fvp:f32[8] fvq:f32[16,8] fvr:f32[1]
            fvs:f32[8,1] fvt:f32[] fvu:f32[8] fvv:f32[2,8] fvw:f32[16] fvx:f32[8,16]
            fvy:f32[16] fvz:f32[16,16] fwa:f32[8] fwb:f32[16,8] fwc:f32[1] fwd:f32[8,1]
            fwe:i32[] fwf:i32[] fwg:f32[] fwh:f32[] fwi:f32[] fwj:i32[] fwk:f32[]
            fwl:f32[] fwm:f32[585] fwn:f32[585] fwo:f32[585] fwp:i32[]. let
            fwq:f32[] = sub 0.800000011920929 fwg
            fwr:i32[] = add fwj 10
            fws:f32[] = convert_element_type[new_dtype=float32 weak_type=True] fwj
            fwt:f32[] = pow fws -0.75
            fwu:f32[] = convert_element_type[new_dtype=float32 weak_type=True] fwr
            fwv:f32[] = div 1.0 fwu
            fww:f32[] = sub 1.0 fwv
            fwx:f32[] = mul fww fwk
            fwy:f32[] = convert_element_type[new_dtype=float32 weak_type=False] fwr
            fwz:f32[] = div fwq fwy
            fxa:f32[] = convert_element_type[new_dtype=float32 weak_type=False] fwx
            fxb:f32[] = add fxa fwz
            fxc:f32[] = convert_element_type[new_dtype=float32 weak_type=True] fwj
            fxd:f32[] = sqrt fxc
            fxe:f32[] = div fxd 0.05
            fxf:f32[] = convert_element_type[new_dtype=float32 weak_type=False] fxe
            fxg:f32[] = mul fxf fxb
            fxh:f32[] = convert_element_type[new_dtype=float32 weak_type=False] fwl
            fxi:f32[] = sub fxh fxg
            fxj:f32[] = mul fwt fwh
            fxk:f32[] = sub 1.0 fwt
            fxl:f32[] = mul fxk fwi
            fxm:f32[] = add fxj fxl
            fxn:i32[] = add fwj 1
          in (fxi, fxm, fxn, fxb, fwl, fwm, fwn, fwo, fwp) }
        { lambda ; fxo:u32[2] fxp:f32[8] fxq:f32[2,8] fxr:f32[16] fxs:f32[8,16] fxt:f32[16]
            fxu:f32[16,16] fxv:f32[8] fxw:f32[16,8] fxx:f32[1] fxy:f32[8,1] fxz:f32[]
            fya:f32[8] fyb:f32[2,8] fyc:f32[16] fyd:f32[8,16] fye:f32[16] fyf:f32[16,16]
            fyg:f32[8] fyh:f32[16,8] fyi:f32[1] fyj:f32[8,1] fyk:f32[8] fyl:f32[2,8]
            fym:f32[16] fyn:f32[8,16] fyo:f32[16] fyp:f32[16,16] fyq:f32[8] fyr:f32[16,8]
            fys:f32[1] fyt:f32[8,1] fyu:bool[] fyv:bool[] fyw:f32[] fyx:f32[8] fyy:f32[2,8]
            fyz:f32[16] fza:f32[8,16] fzb:f32[16] fzc:f32[16,16] fzd:f32[8] fze:f32[16,8]
            fzf:f32[1] fzg:f32[8,1] fzh:f32[8] fzi:f32[2,8] fzj:f32[16] fzk:f32[8,16]
            fzl:f32[16] fzm:f32[16,16] fzn:f32[8] fzo:f32[16,8] fzp:f32[1] fzq:f32[8,1]
            fzr:f32[] fzs:f32[8] fzt:f32[2,8] fzu:f32[16] fzv:f32[8,16] fzw:f32[16]
            fzx:f32[16,16] fzy:f32[8] fzz:f32[16,8] gaa:f32[1] gab:f32[8,1] gac:f32[8]
            gad:f32[2,8] gae:f32[16] gaf:f32[8,16] gag:f32[16] gah:f32[16,16] gai:f32[8]
            gaj:f32[16,8] gak:f32[1] gal:f32[8,1] gam:f32[8] gan:f32[2,8] gao:f32[16]
            gap:f32[8,16] gaq:f32[16] gar:f32[16,16] gas:f32[8] gat:f32[16,8] gau:f32[1]
            gav:f32[8,1] gaw:f32[] gax:f32[8] gay:f32[2,8] gaz:f32[16] gba:f32[8,16]
            gbb:f32[16] gbc:f32[16,16] gbd:f32[8] gbe:f32[16,8] gbf:f32[1] gbg:f32[8,1]
            gbh:i32[] gbi:i32[] gbj:f32[] gbk:f32[] gbl:f32[] gbm:i32[] gbn:f32[]
            gbo:f32[] gbp:f32[585] gbq:f32[585] gbr:f32[585] gbs:i32[]. let
            gbt:f32[] = sub 0.6499999761581421 gbj
            gbu:i32[] = add gbm 10
            gbv:f32[] = convert_element_type[new_dtype=float32 weak_type=True] gbm
            gbw:f32[] = pow gbv -0.75
            gbx:f32[] = convert_element_type[new_dtype=float32 weak_type=True] gbu
            gby:f32[] = div 1.0 gbx
            gbz:f32[] = sub 1.0 gby
            gca:f32[] = mul gbz gbn
            gcb:f32[] = convert_element_type[new_dtype=float32 weak_type=False] gbu
            gcc:f32[] = div gbt gcb
            gcd:f32[] = convert_element_type[new_dtype=float32 weak_type=False] gca
            gce:f32[] = add gcd gcc
            gcf:f32[] = convert_element_type[new_dtype=float32 weak_type=True] gbm
            gcg:f32[] = sqrt gcf
            gch:f32[] = div gcg 0.05
            gci:f32[] = convert_element_type[new_dtype=float32 weak_type=False] gch
            gcj:f32[] = mul gci gce
            gck:f32[] = convert_element_type[new_dtype=float32 weak_type=False] gbo
            gcl:f32[] = sub gck gcj
            gcm:f32[] = mul gbw gbk
            gcn:f32[] = sub 1.0 gbw
            gco:f32[] = mul gcn gbl
            gcp:f32[] = add gcm gco
            gcq:i32[] = add gbm 1
            gcr:f32[16] = reshape[dimensions=None new_sizes=(16,)] fxq
            gcs:f32[128] = reshape[dimensions=None new_sizes=(128,)] fxs
            gct:f32[256] = reshape[dimensions=None new_sizes=(256,)] fxu
            gcu:f32[128] = reshape[dimensions=None new_sizes=(128,)] fxw
            gcv:f32[8] = reshape[dimensions=None new_sizes=(8,)] fxy
            gcw:f32[585] = concatenate[dimension=0] fxp gcr fxr gcs fxt gct fxv gcu
              fxx gcv
            gcx:i32[] = add gbs 1
            gcy:f32[585] = sub gcw gbq
            gcz:f32[] = convert_element_type[new_dtype=float32 weak_type=False] gcx
            gda:f32[585] = div gcy gcz
            gdb:f32[585] = add gbq gda
            gdc:f32[585] = sub gcw gdb
            gdd:f32[585] = mul gcy gdc
            gde:f32[585] = add gbr gdd
          in (gcl, gcp, gcq, gce, gbo, gbp, gdb, gde, gcx) }
      )
      linear=(False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False)
    ] fsb bh fy fz ga gb gc gd ge gf gg gh gi gj gk gl gm gn go gp gq gr gs er fb
      et fc ev fd ex fe ez ff jg jh gt gv gw gx gy gz ha hb hc hd he hf hg hh hi
      hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ie if ig ih
      ii ij ik il im in io ip iq ir is it iu iv iw ix iy iz ja jb jc jd je fx jf
      frw x y z ba bb bc bd be bf
    gdf:bool[] = ne fsa 0
    gdg:i32[] = convert_element_type[new_dtype=int32 weak_type=False] gdf
    gdh:f32[] gdi:f32[] gdj:i32[] gdk:f32[] gdl:f32[] gdm:f32[585] gdn:f32[585] gdo:f32[585]
      gdp:i32[] = cond[
      branches=(
        { lambda ; gdq:f32[] gdr:f32[] gds:i32[] gdt:f32[] gdu:f32[] gdv:f32[585]
            gdw:f32[585] gdx:f32[585] gdy:i32[]. let
            
          in (gdq, gdr, gds, gdt, gdu, gdv, gdw, gdx, gdy) }
        { lambda ; gdz:f32[] gea:f32[] geb:i32[] gec:f32[] ged:f32[] gee:f32[585]
            gef:f32[585] geg:f32[585] geh:i32[]. let
            gei:i32[] = sub geh 1
            gej:f32[] = convert_element_type[new_dtype=float32 weak_type=False] gei
            gek:f32[585] = div geg gej
            gel:i32[] = add geh 5
            gem:f32[] = convert_element_type[new_dtype=float32 weak_type=True] geh
            gen:f32[] = convert_element_type[new_dtype=float32 weak_type=True] gel
            geo:f32[] = div gem gen
            gep:f32[] = convert_element_type[new_dtype=float32 weak_type=False] geo
            geq:f32[585] = mul gep gek
            ger:i32[] = add geh 5
            ges:f32[] = convert_element_type[new_dtype=float32 weak_type=True] ger
            get:f32[] = div 5.0 ges
            geu:f32[] = mul 0.001 get
            gev:f32[] = convert_element_type[new_dtype=float32 weak_type=False] geu
            gew:f32[585] = add geq gev
            gex:f32[585] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(585,)
            ] 0.0
            gey:f32[585] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(585,)
            ] 0.0
            gez:f32[] = exp gea
            gfa:f32[] = mul 10.0 gez
            gfb:f32[] = log gfa
            gfc:f32[] = log gez
          in (gfc, 0.0, 1, 0.0, gfb, gew, gex, gey, 0) }
      )
      linear=(False, False, False, False, False, False, False, False, False)
    ] gdg fsc fsd fse fsf fsg fsh fsi fsj fsk
    gfd:bool[] = eq bg 2999
    gfe:i32[] = convert_element_type[new_dtype=int32 weak_type=False] gfd
    gff:f32[8] gfg:f32[2,8] gfh:f32[16] gfi:f32[8,16] gfj:f32[16] gfk:f32[16,16]
      gfl:f32[8] gfm:f32[16,8] gfn:f32[1] gfo:f32[8,1] gfp:f32[] gfq:f32[8] gfr:f32[2,8]
      gfs:f32[16] gft:f32[8,16] gfu:f32[16] gfv:f32[16,16] gfw:f32[8] gfx:f32[16,8]
      gfy:f32[1] gfz:f32[8,1] gga:f32[] ggb:f32[] ggc:i32[] ggd:f32[] gge:f32[] ggf:f32[585]
      ggg:f32[585] ggh:f32[585] ggi:i32[] ggj:f32[8] ggk:f32[2,8] ggl:f32[16] ggm:f32[8,16]
      ggn:f32[16] ggo:f32[16,16] ggp:f32[8] ggq:f32[16,8] ggr:f32[1] ggs:f32[8,1]
      ggt:f32[] ggu:f32[8] ggv:f32[2,8] ggw:f32[16] ggx:f32[8,16] ggy:f32[16] ggz:f32[16,16]
      gha:f32[8] ghb:f32[16,8] ghc:f32[1] ghd:f32[8,1] ghe:f32[8] ghf:f32[2,8] ghg:f32[16]
      ghh:f32[8,16] ghi:f32[16] ghj:f32[16,16] ghk:f32[8] ghl:f32[16,8] ghm:f32[1]
      ghn:f32[8,1] gho:bool[] ghp:bool[] ghq:f32[] ghr:f32[8] ghs:f32[2,8] ght:f32[16]
      ghu:f32[8,16] ghv:f32[16] ghw:f32[16,16] ghx:f32[8] ghy:f32[16,8] ghz:f32[1]
      gia:f32[8,1] gib:f32[8] gic:f32[2,8] gid:f32[16] gie:f32[8,16] gif:f32[16]
      gig:f32[16,16] gih:f32[8] gii:f32[16,8] gij:f32[1] gik:f32[8,1] gil:f32[] gim:f32[8]
      gin:f32[2,8] gio:f32[16] gip:f32[8,16] giq:f32[16] gir:f32[16,16] gis:f32[8]
      git:f32[16,8] giu:f32[1] giv:f32[8,1] giw:f32[8] gix:f32[2,8] giy:f32[16] giz:f32[8,16]
      gja:f32[16] gjb:f32[16,16] gjc:f32[8] gjd:f32[16,8] gje:f32[1] gjf:f32[8,1]
      gjg:f32[8] gjh:f32[2,8] gji:f32[16] gjj:f32[8,16] gjk:f32[16] gjl:f32[16,16]
      gjm:f32[8] gjn:f32[16,8] gjo:f32[1] gjp:f32[8,1] gjq:f32[] gjr:f32[8] gjs:f32[2,8]
      gjt:f32[16] gju:f32[8,16] gjv:f32[16] gjw:f32[16,16] gjx:f32[8] gjy:f32[16,8]
      gjz:f32[1] gka:f32[8,1] gkb:i32[] gkc:i32[] gkd:f32[] gke:f32[] gkf:f32[] gkg:i32[]
      gkh:f32[] gki:f32[] gkj:f32[585] gkk:f32[585] gkl:f32[585] gkm:i32[] gkn:Tok
      gko:Tok = cond[
      branches=(
        { lambda ; gkp_:f32[8] gkq_:f32[2,8] gkr_:f32[16] gks_:f32[8,16] gkt_:f32[16]
            gku_:f32[16,16] gkv_:f32[8] gkw_:f32[16,8] gkx_:f32[1] gky_:f32[8,1]
            gkz_:f32[] gla_:f32[8] glb_:f32[2,8] glc_:f32[16] gld_:f32[8,16] gle_:f32[16]
            glf_:f32[16,16] glg_:f32[8] glh_:f32[16,8] gli_:f32[1] glj_:f32[8,1]
            glk_:f32[] gll_:f32[] glm_:i32[] gln_:f32[] glo_:f32[] glp_:f32[585]
            glq_:f32[585] glr_:f32[585] gls_:i32[] glt_:f32[8] glu_:f32[2,8] glv_:f32[16]
            glw_:f32[8,16] glx_:f32[16] gly_:f32[16,16] glz_:f32[8] gma_:f32[16,8]
            gmb_:f32[1] gmc_:f32[8,1] gmd_:bool[] gme_:bool[] gmf_:f32[] gmg_:f32[8]
            gmh_:f32[2,8] gmi_:f32[16] gmj_:f32[8,16] gmk_:f32[16] gml_:f32[16,16]
            gmm_:f32[8] gmn_:f32[16,8] gmo_:f32[1] gmp_:f32[8,1] gmq_:f32[8] gmr_:f32[2,8]
            gms_:f32[16] gmt_:f32[8,16] gmu_:f32[16] gmv_:f32[16,16] gmw_:f32[8]
            gmx_:f32[16,8] gmy_:f32[1] gmz_:f32[8,1] gna_:f32[] gnb_:f32[8] gnc_:f32[2,8]
            gnd_:f32[16] gne_:f32[8,16] gnf_:f32[16] gng_:f32[16,16] gnh_:f32[8]
            gni_:f32[16,8] gnj_:f32[1] gnk_:f32[8,1] gnl_:f32[8] gnm_:f32[2,8] gnn_:f32[16]
            gno_:f32[8,16] gnp_:f32[16] gnq_:f32[16,16] gnr_:f32[8] gns_:f32[16,8]
            gnt_:f32[1] gnu_:f32[8,1] gnv_:f32[8] gnw_:f32[2,8] gnx_:f32[16] gny_:f32[8,16]
            gnz_:f32[16] goa_:f32[16,16] gob_:f32[8] goc_:f32[16,8] god_:f32[1] goe_:f32[8,1]
            gof_:f32[] gog_:f32[8] goh_:f32[2,8] goi_:f32[16] goj_:f32[8,16] gok_:f32[16]
            gol_:f32[16,16] gom_:f32[8] gon_:f32[16,8] goo_:f32[1] gop_:f32[8,1]
            goq_:i32[] gor_:i32[] gos_:f32[] got:f32[8] gou:f32[2,8] gov:f32[16]
            gow:f32[8,16] gox:f32[16] goy:f32[16,16] goz:f32[8] gpa:f32[16,8] gpb:f32[1]
            gpc:f32[8,1] gpd:f32[] gpe:f32[8] gpf:f32[2,8] gpg:f32[16] gph:f32[8,16]
            gpi:f32[16] gpj:f32[16,16] gpk:f32[8] gpl:f32[16,8] gpm:f32[1] gpn:f32[8,1]
            gpo:f32[] gpp:f32[] gpq:i32[] gpr:f32[] gps:f32[] gpt:f32[585] gpu:f32[585]
            gpv:f32[585] gpw:i32[] gpx:f32[8] gpy:f32[2,8] gpz:f32[16] gqa:f32[8,16]
            gqb:f32[16] gqc:f32[16,16] gqd:f32[8] gqe:f32[16,8] gqf:f32[1] gqg:f32[8,1]
            gqh:bool[] gqi:bool[] gqj:f32[] gqk:f32[8] gql:f32[2,8] gqm:f32[16] gqn:f32[8,16]
            gqo:f32[16] gqp:f32[16,16] gqq:f32[8] gqr:f32[16,8] gqs:f32[1] gqt:f32[8,1]
            gqu:f32[8] gqv:f32[2,8] gqw:f32[16] gqx:f32[8,16] gqy:f32[16] gqz:f32[16,16]
            gra:f32[8] grb:f32[16,8] grc:f32[1] grd:f32[8,1] gre:f32[] grf:f32[8]
            grg:f32[2,8] grh:f32[16] gri:f32[8,16] grj:f32[16] grk:f32[16,16] grl:f32[8]
            grm:f32[16,8] grn:f32[1] gro:f32[8,1] grp:f32[8] grq:f32[2,8] grr:f32[16]
            grs:f32[8,16] grt:f32[16] gru:f32[16,16] grv:f32[8] grw:f32[16,8] grx:f32[1]
            gry:f32[8,1] grz:f32[8] gsa:f32[2,8] gsb:f32[16] gsc:f32[8,16] gsd:f32[16]
            gse:f32[16,16] gsf:f32[8] gsg:f32[16,8] gsh:f32[1] gsi:f32[8,1] gsj:f32[]
            gsk:f32[8] gsl:f32[2,8] gsm:f32[16] gsn:f32[8,16] gso:f32[16] gsp:f32[16,16]
            gsq:f32[8] gsr:f32[16,8] gss:f32[1] gst:f32[8,1] gsu:i32[] gsv:i32[]
            gsw:f32[] gsx:Tok gsy:Tok. let
            
          in (got, gou, gov, gow, gox, goy, goz, gpa, gpb, gpc, gpd, gpe, gpf, gpg,
            gph, gpi, gpj, gpk, gpl, gpm, gpn, gpo, gpp, gpq, gpr, gps, gpt, gpu,
            gpv, gpw, got, gou, gov, gow, gox, goy, goz, gpa, gpb, gpc, gpd, gpe,
            gpf, gpg, gph, gpi, gpj, gpk, gpl, gpm, gpn, gpx, gpy, gpz, gqa, gqb,
            gqc, gqd, gqe, gqf, gqg, gqh, gqi, gqj, gqk, gql, gqm, gqn, gqo, gqp,
            gqq, gqr, gqs, gqt, gqu, gqv, gqw, gqx, gqy, gqz, gra, grb, grc, grd,
            gre, grf, grg, grh, gri, grj, grk, grl, grm, grn, gro, grp, grq, grr,
            grs, grt, gru, grv, grw, grx, gry, grz, gsa, gsb, gsc, gsd, gse, gsf,
            gsg, gsh, gsi, gsj, gsk, gsl, gsm, gsn, gso, gsp, gsq, gsr, gss, gst,
            gsu, gsv, gsw, gpo, gpp, gpq, gpr, gps, gpt, gpu, gpv, gpw, gsx, gsy) }
        { lambda ; gsz:f32[8] gta:f32[2,8] gtb:f32[16] gtc:f32[8,16] gtd:f32[16]
            gte:f32[16,16] gtf:f32[8] gtg:f32[16,8] gth:f32[1] gti:f32[8,1] gtj:f32[]
            gtk:f32[8] gtl:f32[2,8] gtm:f32[16] gtn:f32[8,16] gto:f32[16] gtp:f32[16,16]
            gtq:f32[8] gtr:f32[16,8] gts:f32[1] gtt:f32[8,1] gtu:f32[] gtv:f32[]
            gtw:i32[] gtx:f32[] gty:f32[] gtz:f32[585] gua:f32[585] gub:f32[585]
            guc:i32[] gud:f32[8] gue:f32[2,8] guf:f32[16] gug:f32[8,16] guh:f32[16]
            gui:f32[16,16] guj:f32[8] guk:f32[16,8] gul:f32[1] gum:f32[8,1] gun:bool[]
            guo:bool[] gup:f32[] guq:f32[8] gur:f32[2,8] gus:f32[16] gut:f32[8,16]
            guu:f32[16] guv:f32[16,16] guw:f32[8] gux:f32[16,8] guy:f32[1] guz:f32[8,1]
            gva:f32[8] gvb:f32[2,8] gvc:f32[16] gvd:f32[8,16] gve:f32[16] gvf:f32[16,16]
            gvg:f32[8] gvh:f32[16,8] gvi:f32[1] gvj:f32[8,1] gvk:f32[] gvl:f32[8]
            gvm:f32[2,8] gvn:f32[16] gvo:f32[8,16] gvp:f32[16] gvq:f32[16,16] gvr:f32[8]
            gvs:f32[16,8] gvt:f32[1] gvu:f32[8,1] gvv:f32[8] gvw:f32[2,8] gvx:f32[16]
            gvy:f32[8,16] gvz:f32[16] gwa:f32[16,16] gwb:f32[8] gwc:f32[16,8] gwd:f32[1]
            gwe:f32[8,1] gwf:f32[8] gwg:f32[2,8] gwh:f32[16] gwi:f32[8,16] gwj:f32[16]
            gwk:f32[16,16] gwl:f32[8] gwm:f32[16,8] gwn:f32[1] gwo:f32[8,1] gwp:f32[]
            gwq:f32[8] gwr:f32[2,8] gws:f32[16] gwt:f32[8,16] gwu:f32[16] gwv:f32[16,16]
            gww:f32[8] gwx:f32[16,8] gwy:f32[1] gwz:f32[8,1] gxa:i32[] gxb:i32[]
            gxc:f32[] gxd_:f32[8] gxe_:f32[2,8] gxf_:f32[16] gxg_:f32[8,16] gxh_:f32[16]
            gxi_:f32[16,16] gxj_:f32[8] gxk_:f32[16,8] gxl_:f32[1] gxm_:f32[8,1]
            gxn_:f32[] gxo_:f32[8] gxp_:f32[2,8] gxq_:f32[16] gxr_:f32[8,16] gxs_:f32[16]
            gxt_:f32[16,16] gxu_:f32[8] gxv_:f32[16,8] gxw_:f32[1] gxx_:f32[8,1]
            gxy_:f32[] gxz_:f32[] gya_:i32[] gyb_:f32[] gyc_:f32[] gyd_:f32[585]
            gye_:f32[585] gyf_:f32[585] gyg_:i32[] gyh_:f32[8] gyi_:f32[2,8] gyj_:f32[16]
            gyk_:f32[8,16] gyl_:f32[16] gym_:f32[16,16] gyn_:f32[8] gyo_:f32[16,8]
            gyp_:f32[1] gyq_:f32[8,1] gyr_:bool[] gys_:bool[] gyt_:f32[] gyu_:f32[8]
            gyv_:f32[2,8] gyw_:f32[16] gyx_:f32[8,16] gyy_:f32[16] gyz_:f32[16,16]
            gza_:f32[8] gzb_:f32[16,8] gzc_:f32[1] gzd_:f32[8,1] gze_:f32[8] gzf_:f32[2,8]
            gzg_:f32[16] gzh_:f32[8,16] gzi_:f32[16] gzj_:f32[16,16] gzk_:f32[8]
            gzl_:f32[16,8] gzm_:f32[1] gzn_:f32[8,1] gzo_:f32[] gzp_:f32[8] gzq_:f32[2,8]
            gzr_:f32[16] gzs_:f32[8,16] gzt_:f32[16] gzu_:f32[16,16] gzv_:f32[8]
            gzw_:f32[16,8] gzx_:f32[1] gzy_:f32[8,1] gzz_:f32[8] haa_:f32[2,8] hab_:f32[16]
            hac_:f32[8,16] had_:f32[16] hae_:f32[16,16] haf_:f32[8] hag_:f32[16,8]
            hah_:f32[1] hai_:f32[8,1] haj_:f32[8] hak_:f32[2,8] hal_:f32[16] ham_:f32[8,16]
            han_:f32[16] hao_:f32[16,16] hap_:f32[8] haq_:f32[16,8] har_:f32[1] has_:f32[8,1]
            hat_:f32[] hau_:f32[8] hav_:f32[2,8] haw_:f32[16] hax_:f32[8,16] hay_:f32[16]
            haz_:f32[16,16] hba_:f32[8] hbb_:f32[16,8] hbc_:f32[1] hbd_:f32[8,1]
            hbe_:i32[] hbf_:i32[] hbg_:f32[] hbh:Tok hbi:Tok. let
            hbj:Tok hbk:Tok = outside_call[
              arg_treedef=PyTreeDef(None)
              callback=<jax.experimental.host_callback._CallbackWrapper object at 0x7fdcb0d58c90>
              has_token=True
              identity=True
            ] hbh hbi
          in (gsz, gta, gtb, gtc, gtd, gte, gtf, gtg, gth, gti, gtj, gtk, gtl, gtm,
            gtn, gto, gtp, gtq, gtr, gts, gtt, gtu, gtv, gtw, gtx, gty, gtz, gua,
            gub, guc, gsz, gta, gtb, gtc, gtd, gte, gtf, gtg, gth, gti, gtj, gtk,
            gtl, gtm, gtn, gto, gtp, gtq, gtr, gts, gtt, gud, gue, guf, gug, guh,
            gui, guj, guk, gul, gum, gun, guo, gup, guq, gur, gus, gut, guu, guv,
            guw, gux, guy, guz, gva, gvb, gvc, gvd, gve, gvf, gvg, gvh, gvi, gvj,
            gvk, gvl, gvm, gvn, gvo, gvp, gvq, gvr, gvs, gvt, gvu, gvv, gvw, gvx,
            gvy, gvz, gwa, gwb, gwc, gwd, gwe, gwf, gwg, gwh, gwi, gwj, gwk, gwl,
            gwm, gwn, gwo, gwp, gwq, gwr, gws, gwt, gwu, gwv, gww, gwx, gwy, gwz,
            gxa, gxb, gxc, gtu, gtv, gtw, gtx, gty, gtz, gua, gub, guc, hbj, hbk) }
      )
      linear=(False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False)
    ] gfe fy fz ga gb gc gd ge gf gg gh gi gj gk gl gm gn go gp gq gr gs gdh gdi
      gdj gdk gdl gdm gdn gdo gdp er fb et fc ev fd ex fe ez ff jg jh gt gv gw gx
      gy gz ha hb hc hd he hf hg hh hi hj hk hl hm hn ho hp hq hr hs ht hu hv hw
      hx hy hz ia ib ic id ie if ig ih ii ij ik il im in io ip iq ir is it iu iv
      iw ix iy iz ja jb jc jd je fx jf frw fy fz ga gb gc gd ge gf gg gh gi gj gk
      gl gm gn go gp gq gr gs gdh gdi gdj gdk gdl gdm gdn gdo gdp er fb et fc ev
      fd ex fe ez ff jg jh gt gv gw gx gy gz ha hb hc hd he hf hg hh hi hj hk hl
      hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ie if ig ih ii ij ik
      il im in io ip iq ir is it iu iv iw ix iy iz ja jb jc jd je fx jf frw db dc
  in (gff, gfg, gfh, gfi, gfj, gfk, gfl, gfm, gfn, gfo, gfp, gfq, gfr, gfs, gft,
    gfu, gfv, gfw, gfx, gfy, gfz, gga, ggb, ggc, ggd, gge, ggf, ggg, ggh, ggi, ggj,
    ggk, ggl, ggm, ggn, ggo, ggp, ggq, ggr, ggs, ggt, ggu, ggv, ggw, ggx, ggy, ggz,
    gha, ghb, ghc, ghd, ghe, ghf, ghg, ghh, ghi, ghj, ghk, ghl, ghm, ghn, gho, ghp,
    ghq, ghr, ghs, ght, ghu, ghv, ghw, ghx, ghy, ghz, gia, gib, gic, gid, gie, gif,
    gig, gih, gii, gij, gik, gil, gim, gin, gio, gip, giq, gir, gis, git, giu, giv,
    giw, gix, giy, giz, gja, gjb, gjc, gjd, gje, gjf, gjg, gjh, gji, gjj, gjk, gjl,
    gjm, gjn, gjo, gjp, gjq, gjr, gjs, gjt, gju, gjv, gjw, gjx, gjy, gjz, gka, gkb,
    gkc, gkd, gke, gkf, gkg, gkh, gki, gkj, gkk, gkl, gkm, gkn, gko) }, ())

During handling of the above exception, another exception occurred:

JaxStackTraceBeforeTransformation         Traceback (most recent call last)
~/miniconda3/envs/py37/lib/python3.7/runpy.py in _run_module_as_main(***failed resolving arguments***)
    192     return _run_code(code, main_globals, None,
--> 193                      "__main__", mod_spec)
    194 

~/miniconda3/envs/py37/lib/python3.7/runpy.py in _run_code(***failed resolving arguments***)
     84                        __spec__ = mod_spec)
---> 85     exec(code, run_globals)
     86     return run_globals

~/miniconda3/envs/py37/lib/python3.7/site-packages/ipykernel_launcher.py in <module>
     16 
---> 17     app.launch_new_instance()

~/miniconda3/envs/py37/lib/python3.7/site-packages/traitlets/config/application.py in launch_instance(***failed resolving arguments***)
    977         app.initialize(argv)
--> 978         app.start()
    979 

~/miniconda3/envs/py37/lib/python3.7/site-packages/ipykernel/kernelapp.py in start(***failed resolving arguments***)
    711             try:
--> 712                 self.io_loop.start()
    713             except KeyboardInterrupt:

~/miniconda3/envs/py37/lib/python3.7/site-packages/tornado/platform/asyncio.py in start(***failed resolving arguments***)
    214             asyncio.set_event_loop(self.asyncio_loop)
--> 215             self.asyncio_loop.run_forever()
    216         finally:

~/miniconda3/envs/py37/lib/python3.7/asyncio/base_events.py in run_forever(***failed resolving arguments***)
    540             while True:
--> 541                 self._run_once()
    542                 if self._stopping:

~/miniconda3/envs/py37/lib/python3.7/asyncio/base_events.py in _run_once(***failed resolving arguments***)
   1785             else:
-> 1786                 handle._run()
   1787         handle = None  # Needed to break cycles when an exception occurs.

~/miniconda3/envs/py37/lib/python3.7/asyncio/events.py in _run(***failed resolving arguments***)
     87         try:
---> 88             self._context.run(self._callback, *self._args)
     89         except Exception as exc:

~/miniconda3/envs/py37/lib/python3.7/site-packages/ipykernel/kernelbase.py in dispatch_queue(***failed resolving arguments***)
    509             try:
--> 510                 await self.process_one()
    511             except Exception:

~/miniconda3/envs/py37/lib/python3.7/site-packages/ipykernel/kernelbase.py in process_one(***failed resolving arguments***)
    498                 return None
--> 499         await dispatch(*args)
    500 

~/miniconda3/envs/py37/lib/python3.7/site-packages/ipykernel/kernelbase.py in dispatch_shell(***failed resolving arguments***)
    405                 if inspect.isawaitable(result):
--> 406                     await result
    407             except Exception:

~/miniconda3/envs/py37/lib/python3.7/site-packages/ipykernel/kernelbase.py in execute_request(***failed resolving arguments***)
    729         if inspect.isawaitable(reply_content):
--> 730             reply_content = await reply_content
    731 

~/miniconda3/envs/py37/lib/python3.7/site-packages/ipykernel/ipkernel.py in do_execute(***failed resolving arguments***)
    386                         silent=silent,
--> 387                         cell_id=cell_id,
    388                     )

~/miniconda3/envs/py37/lib/python3.7/site-packages/ipykernel/zmqshell.py in run_cell(***failed resolving arguments***)
    527         self._last_traceback = None
--> 528         return super().run_cell(*args, **kwargs)
    529 

~/miniconda3/envs/py37/lib/python3.7/site-packages/IPython/core/interactiveshell.py in run_cell(***failed resolving arguments***)
   2975             result = self._run_cell(
-> 2976                 raw_cell, store_history, silent, shell_futures, cell_id
   2977             )

~/miniconda3/envs/py37/lib/python3.7/site-packages/IPython/core/interactiveshell.py in _run_cell(***failed resolving arguments***)
   3029         try:
-> 3030             return runner(coro)
   3031         except BaseException as e:

~/miniconda3/envs/py37/lib/python3.7/site-packages/IPython/core/async_helpers.py in _pseudo_sync_runner(***failed resolving arguments***)
     77     try:
---> 78         coro.send(None)
     79     except StopIteration as exc:

~/miniconda3/envs/py37/lib/python3.7/site-packages/IPython/core/interactiveshell.py in run_cell_async(***failed resolving arguments***)
   3257                 has_raised = await self.run_ast_nodes(code_ast.body, cell_name,
-> 3258                        interactivity=interactivity, compiler=compiler, result=result)
   3259 

~/miniconda3/envs/py37/lib/python3.7/site-packages/IPython/core/interactiveshell.py in run_ast_nodes(***failed resolving arguments***)
   3472                         asy = compare(code)
-> 3473                     if (await self.run_code(code, result,  async_=asy)):
   3474                         return True

~/miniconda3/envs/py37/lib/python3.7/site-packages/IPython/core/interactiveshell.py in run_code(***failed resolving arguments***)
   3552                 else:
-> 3553                     exec(code_obj, self.user_global_ns, self.user_ns)
   3554             finally:

/tmp/ipykernel_3317/3480722215.py in <module>
      4 adapt = blackjax.window_adaptation(blackjax.nuts, bnn_log_joint_partial, num_warmup, progress_bar=True)
----> 5 final_state, kernel, _ = adapt.run(key_warmup, params)

~/miniconda3/envs/py37/lib/python3.7/site-packages/blackjax/kernels.py in run(***failed resolving arguments***)
    746             (init_state, init_warmup_state),
--> 747             (jnp.arange(num_steps), keys, schedule),
    748         )

~/miniconda3/envs/py37/lib/python3.7/site-packages/blackjax/progress_bar.py in wrapper_progress_bar(***failed resolving arguments***)
     84                 iter_num = x
---> 85             _update_progress_bar(iter_num)
     86             result = func(carry, x)

~/miniconda3/envs/py37/lib/python3.7/site-packages/blackjax/progress_bar.py in _update_progress_bar(***failed resolving arguments***)
     35             lambda _: iter_num,
---> 36             operand=None,
     37         )

~/miniconda3/envs/py37/lib/python3.7/site-packages/blackjax/progress_bar.py in <lambda>(***failed resolving arguments***)
     32             lambda _: host_callback.id_tap(
---> 33                 _define_bar, iter_num, result=iter_num, tap_with_device=True
     34             ),

~/miniconda3/envs/py37/lib/python3.7/site-packages/jax/experimental/host_callback.py in id_tap(***failed resolving arguments***)
    608 
--> 609   call_res = _call(tap_func, arg, call_with_device=tap_with_device,
    610                    result_shape=None, identity=True)

~/miniconda3/envs/py37/lib/python3.7/site-packages/jax/experimental/host_callback.py in _call(***failed resolving arguments***)
    762     params["result_treedef"] = result_treedef
--> 763     params["flat_results_aval"] = tuple(flat_results_aval)
    764   flat_results = outside_call_p.bind(*flat_args, **params)

JaxStackTraceBeforeTransformation: TypeError: emit_python_callback() missing 1 required positional argument: 'result_avals'

The preceding stack trace is the source of the JAX operation that, once transformed by JAX, triggered the following exception.

--------------------

The above exception was the direct cause of the following exception:

TypeError                                 Traceback (most recent call last)
/tmp/ipykernel_3317/3480722215.py in <module>
      3 key_samples, key_init, key_warmup, key = jax.random.split(key, 4)
      4 adapt = blackjax.window_adaptation(blackjax.nuts, bnn_log_joint_partial, num_warmup, progress_bar=True)
----> 5 final_state, kernel, _ = adapt.run(key_warmup, params)

~/miniconda3/envs/py37/lib/python3.7/site-packages/blackjax/kernels.py in run(rng_key, position)
    745             one_step_,
    746             (init_state, init_warmup_state),
--> 747             (jnp.arange(num_steps), keys, schedule),
    748         )
    749         last_chain_state, last_warmup_state = last_state

    [... skipping hidden 27 frame]

~/miniconda3/envs/py37/lib/python3.7/site-packages/jax/experimental/host_callback.py in _outside_call_lowering(ctx, has_token, identity, flat_results_aval, *args, **params)
   1186       wrapped_callback, current_token, callback_operands,
   1187       callback_operand_avals, callback_flat_results_aval,  # type: ignore[arg-type]
-> 1188       has_side_effect=True, sharding=sharding)
   1189   _callback_handler_data.keep_alives.append(keep_alive)
   1190   # We must put the two tokens at the end

TypeError: emit_python_callback() missing 1 required positional argument: 'result_avals'
TypeError: emit_python_callback() missing 1 required positional argument: 'result_avals'
