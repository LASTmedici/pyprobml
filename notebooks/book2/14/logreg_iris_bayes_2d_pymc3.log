An error occurred while executing the following cell:
------------------
# Bayesian Binary logistic regression in 2d for iris flwoers

# Code is based on
# https://github.com/aloctavodia/BAP/blob/master/code/Chp4/04_Generalizing_linear_models.ipynb


try:
    import pymc3 as pm
except ModuleNotFoundError:
    %pip install -qq pymc3
    import pymc3 as pm
import numpy as np
import pandas as pd

try:
    import theano.tensor as tt
except ModuleNotFoundError:
    %pip install -qq theano
    import theano.tensor as tt
# import seaborn as sns
import scipy.stats as stats
from scipy.special import expit as logistic
import matplotlib.pyplot as plt

try:
    import arviz as az
except ModuleNotFoundError:
    %pip install -qq arviz
    import arviz as az
from sklearn.datasets import load_iris

try:
    import probml_utils as pml
except ModuleNotFoundError:
    %pip install -qq git+https://github.com/probml/probml-utils.git
    import probml_utils as pml

iris = load_iris()
X = iris.data
y = iris.target

# Convert to pandas dataframe
df_iris = pd.DataFrame(data=iris.data, columns=["sepal_length", "sepal_width", "petal_length", "petal_width"])
df_iris["species"] = pd.Series(iris.target_names[y], dtype="category")


df = df_iris.query("species == ('setosa', 'versicolor')")

# We reduce the sample size from 50 to 25 per class,
# or to 5 + 45 in the unbalanced setting.
# The latter will increase posterior uncertainty
unbalanced = False  # True
if unbalanced:
    df = df[45:95]
else:
    df = df[25:75]
assert len(df) == 50

y_1 = pd.Categorical(df["species"]).codes
x_n = ["sepal_length", "sepal_width"]
x_1 = df[x_n].values


with pm.Model() as model_1:
    α = pm.Normal("α", mu=0, sd=10)
    β = pm.Normal("β", mu=0, sd=2, shape=len(x_n))

    μ = α + pm.math.dot(x_1, β)
    θ = pm.Deterministic("θ", 1 / (1 + pm.math.exp(-μ)))
    bd = pm.Deterministic("bd", -α / β[1] - β[0] / β[1] * x_1[:, 0])

    yl = pm.Bernoulli("yl", p=θ, observed=y_1)

    trace_1 = pm.sample(2000, cores=1, chains=2)

varnames = ["α", "β"]
# az.plot_forest(trace_1, var_names=varnames);

idx = np.argsort(x_1[:, 0])
bd = trace_1["bd"].mean(0)[idx]

plt.figure()
plt.scatter(x_1[:, 0], x_1[:, 1], c=[f"C{x}" for x in y_1])
plt.plot(x_1[:, 0][idx], bd, color="k")

az.plot_hdi(x_1[:, 0], trace_1["bd"], color="k")

plt.xlabel(x_n[0])
plt.ylabel(x_n[1])

plt.tight_layout()
if unbalanced:
    pml.savefig("logreg_iris_bayes_2d_unbalanced.pdf", dpi=300)
else:
    pml.savefig("logreg_iris_bayes_2d.pdf", dpi=300)

plt.show()
------------------

---------------------------------------------------------------------------
AssertionError                            Traceback (most recent call last)
/tmp/ipykernel_2907/795184038.py in <module>
     63 
     64 with pm.Model() as model_1:
---> 65     α = pm.Normal("α", mu=0, sd=10)
     66     β = pm.Normal("β", mu=0, sd=2, shape=len(x_n))
     67 

~/miniconda3/envs/py37/lib/python3.7/site-packages/pymc3/distributions/distribution.py in __new__(cls, name, *args, **kwargs)
    123         else:
    124             dist = cls.dist(*args, **kwargs)
--> 125         return model.Var(name, dist, data, total_size, dims=dims)
    126 
    127     def __getnewargs__(self):

~/miniconda3/envs/py37/lib/python3.7/site-packages/pymc3/model.py in Var(self, name, dist, data, total_size, dims)
   1136             if getattr(dist, "transform", None) is None:
   1137                 with self:
-> 1138                     var = FreeRV(name=name, distribution=dist, total_size=total_size, model=self)
   1139                 self.free_RVs.append(var)
   1140             else:

~/miniconda3/envs/py37/lib/python3.7/site-packages/pymc3/model.py in __init__(self, type, owner, index, name, distribution, total_size, model)
   1672             # The logp might need scaling in minibatches.
   1673             # This is done in `Factor`.
-> 1674             self.logp_sum_unscaledt = distribution.logp_sum(self)
   1675             self.logp_nojac_unscaledt = distribution.logp_nojac(self)
   1676             self.total_size = total_size

~/miniconda3/envs/py37/lib/python3.7/site-packages/pymc3/distributions/distribution.py in logp_sum(self, *args, **kwargs)
    307         if only the sum of the logp values is needed.
    308         """
--> 309         return tt.sum(self.logp(*args, **kwargs))
    310 
    311     __latex__ = _repr_latex_

~/miniconda3/envs/py37/lib/python3.7/site-packages/theano/tensor/basic.py in sum(input, axis, dtype, keepdims, acc_dtype)
   3219     """
   3220 
-> 3221     out = elemwise.Sum(axis=axis, dtype=dtype, acc_dtype=acc_dtype)(input)
   3222 
   3223     if keepdims:

~/miniconda3/envs/py37/lib/python3.7/site-packages/theano/graph/op.py in __call__(self, *inputs, **kwargs)
    251 
    252         if config.compute_test_value != "off":
--> 253             compute_test_value(node)
    254 
    255         if self.default_output is not None:

~/miniconda3/envs/py37/lib/python3.7/site-packages/theano/graph/op.py in compute_test_value(node)
    124 
    125     # Create a thunk that performs the computation
--> 126     thunk = node.op.make_thunk(node, storage_map, compute_map, no_recycling=[])
    127     thunk.inputs = [storage_map[v] for v in node.inputs]
    128     thunk.outputs = [storage_map[v] for v in node.outputs]

~/miniconda3/envs/py37/lib/python3.7/site-packages/theano/graph/op.py in make_thunk(self, node, storage_map, compute_map, no_recycling, impl)
    632             )
    633             try:
--> 634                 return self.make_c_thunk(node, storage_map, compute_map, no_recycling)
    635             except (NotImplementedError, MethodNotDefined):
    636                 # We requested the c code, so don't catch the error.

~/miniconda3/envs/py37/lib/python3.7/site-packages/theano/graph/op.py in make_c_thunk(self, node, storage_map, compute_map, no_recycling)
    599                 raise NotImplementedError("float16")
    600         outputs = cl.make_thunk(
--> 601             input_storage=node_input_storage, output_storage=node_output_storage
    602         )
    603         thunk, node_input_filters, node_output_filters = outputs

~/miniconda3/envs/py37/lib/python3.7/site-packages/theano/link/c/basic.py in make_thunk(self, input_storage, output_storage, storage_map)
   1202         init_tasks, tasks = self.get_init_tasks()
   1203         cthunk, module, in_storage, out_storage, error_storage = self.__compile__(
-> 1204             input_storage, output_storage, storage_map
   1205         )
   1206 

~/miniconda3/envs/py37/lib/python3.7/site-packages/theano/link/c/basic.py in __compile__(self, input_storage, output_storage, storage_map)
   1140             input_storage,
   1141             output_storage,
-> 1142             storage_map,
   1143         )
   1144         return (

~/miniconda3/envs/py37/lib/python3.7/site-packages/theano/link/c/basic.py in cthunk_factory(self, error_storage, in_storage, out_storage, storage_map)
   1632             for node in self.node_order:
   1633                 node.op.prepare_node(node, storage_map, None, "c")
-> 1634             module = get_module_cache().module_from_key(key=key, lnk=self)
   1635 
   1636         vars = self.inputs + self.outputs + self.orphans

~/miniconda3/envs/py37/lib/python3.7/site-packages/theano/link/c/cmodule.py in module_from_key(self, key, lnk)
   1155         # Is the source code already in the cache?
   1156         module_hash = get_module_hash(src_code, key)
-> 1157         module = self._get_from_hash(module_hash, key)
   1158         if module is not None:
   1159             return module

~/miniconda3/envs/py37/lib/python3.7/site-packages/theano/link/c/cmodule.py in _get_from_hash(self, module_hash, key)
   1058             with lock_ctx():
   1059                 try:
-> 1060                     key_data.add_key(key, save_pkl=bool(key[0]))
   1061                     key_broken = False
   1062                 except pickle.PicklingError:

~/miniconda3/envs/py37/lib/python3.7/site-packages/theano/link/c/cmodule.py in add_key(self, key, save_pkl)
    495 
    496         """
--> 497         assert key not in self.keys
    498         self.keys.add(key)
    499         if save_pkl:

AssertionError: 
AssertionError: 
