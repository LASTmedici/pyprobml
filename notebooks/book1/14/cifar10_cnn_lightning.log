An error occurred while executing the following cell:
------------------
if DATA_AUG_TYPE == "rnd":
    # https://pytorch-lightning.readthedocs.io/en/latest/notebooks/lightning_examples/cifar10-baseline.html#
    train_transforms = torchvision.transforms.Compose(
        [
            torchvision.transforms.RandomCrop(32, padding=4),
            torchvision.transforms.RandomHorizontalFlip(),
            torchvision.transforms.ToTensor(),
            cifar10_normalization(),
        ]
    )
else:
    # https://github.com/PyTorchLightning/Lightning-Bolts/blob/master/pl_bolts/datamodules/cifar10_datamodule.py#L115
    train_transforms = torchvision.transforms.Compose(
        [
            torchvision.transforms.ToTensor(),
            cifar10_normalization(),
        ]
    )


test_transforms = torchvision.transforms.Compose(
    [
        torchvision.transforms.ToTensor(),
        cifar10_normalization(),
    ]
)


dm = CIFAR10DataModule(
    data_dir=PATH_DATASETS,
    batch_size=BATCH_SIZE,
    num_workers=NUM_WORKERS,
    train_transforms=train_transforms,
    test_transforms=test_transforms,
    val_transforms=test_transforms,
)


dm.prepare_data()  # force download now
dm.setup(stage="fit")  # force make data loaders now

classes = ("plane", "car", "bird", "cat", "deer", "dog", "frog", "horse", "ship", "truck")
------------------

---------------------------------------------------------------------------
HTTPError                                 Traceback (most recent call last)
/tmp/ipykernel_4242/1707222892.py in <module>
     37 
     38 
---> 39 dm.prepare_data()  # force download now
     40 dm.setup(stage="fit")  # force make data loaders now
     41 

~/miniconda3/envs/py37/lib/python3.7/site-packages/pl_bolts/datamodules/vision_datamodule.py in prepare_data(self, *args, **kwargs)
     59     def prepare_data(self, *args: Any, **kwargs: Any) -> None:
     60         """Saves files to data_dir."""
---> 61         self.dataset_cls(self.data_dir, train=True, download=True)
     62         self.dataset_cls(self.data_dir, train=False, download=True)
     63 

~/miniconda3/envs/py37/lib/python3.7/site-packages/torchvision/datasets/cifar.py in __init__(self, root, train, transform, target_transform, download)
     63 
     64         if download:
---> 65             self.download()
     66 
     67         if not self._check_integrity():

~/miniconda3/envs/py37/lib/python3.7/site-packages/torchvision/datasets/cifar.py in download(self)
    139             print("Files already downloaded and verified")
    140             return
--> 141         download_and_extract_archive(self.url, self.root, filename=self.filename, md5=self.tgz_md5)
    142 
    143     def extra_repr(self) -> str:

~/miniconda3/envs/py37/lib/python3.7/site-packages/torchvision/datasets/utils.py in download_and_extract_archive(url, download_root, extract_root, filename, md5, remove_finished)
    428         filename = os.path.basename(url)
    429 
--> 430     download_url(url, download_root, filename, md5)
    431 
    432     archive = os.path.join(download_root, filename)

~/miniconda3/envs/py37/lib/python3.7/site-packages/torchvision/datasets/utils.py in download_url(url, root, filename, md5, max_redirect_hops)
    129     else:
    130         # expand redirect chain if needed
--> 131         url = _get_redirect_url(url, max_hops=max_redirect_hops)
    132 
    133         # check if file is located on Google Drive

~/miniconda3/envs/py37/lib/python3.7/site-packages/torchvision/datasets/utils.py in _get_redirect_url(url, max_hops)
     77 
     78     for _ in range(max_hops + 1):
---> 79         with urllib.request.urlopen(urllib.request.Request(url, headers=headers)) as response:
     80             if response.url == url or response.url is None:
     81                 return url

~/miniconda3/envs/py37/lib/python3.7/urllib/request.py in urlopen(url, data, timeout, cafile, capath, cadefault, context)
    220     else:
    221         opener = _opener
--> 222     return opener.open(url, data, timeout)
    223 
    224 def install_opener(opener):

~/miniconda3/envs/py37/lib/python3.7/urllib/request.py in open(self, fullurl, data, timeout)
    529         for processor in self.process_response.get(protocol, []):
    530             meth = getattr(processor, meth_name)
--> 531             response = meth(req, response)
    532 
    533         return response

~/miniconda3/envs/py37/lib/python3.7/urllib/request.py in http_response(self, request, response)
    639         if not (200 <= code < 300):
    640             response = self.parent.error(
--> 641                 'http', request, response, code, msg, hdrs)
    642 
    643         return response

~/miniconda3/envs/py37/lib/python3.7/urllib/request.py in error(self, proto, *args)
    567         if http_err:
    568             args = (dict, 'default', 'http_error_default') + orig_args
--> 569             return self._call_chain(*args)
    570 
    571 # XXX probably also want an abstract factory that knows when it makes

~/miniconda3/envs/py37/lib/python3.7/urllib/request.py in _call_chain(self, chain, kind, meth_name, *args)
    501         for handler in handlers:
    502             func = getattr(handler, meth_name)
--> 503             result = func(*args)
    504             if result is not None:
    505                 return result

~/miniconda3/envs/py37/lib/python3.7/urllib/request.py in http_error_default(self, req, fp, code, msg, hdrs)
    647 class HTTPDefaultErrorHandler(BaseHandler):
    648     def http_error_default(self, req, fp, code, msg, hdrs):
--> 649         raise HTTPError(req.full_url, code, msg, hdrs, fp)
    650 
    651 class HTTPRedirectHandler(BaseHandler):

HTTPError: HTTP Error 500: Internal Server Error
HTTPError: HTTP Error 500: Internal Server Error
